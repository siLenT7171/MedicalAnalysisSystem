#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import seaborn as sns
from datetime import datetime, timedelta
import sqlite3
import json
import os
import webbrowser
import tempfile
from fpdf import FPDF
import google.generativeai as genai
import warnings
warnings.filterwarnings('ignore')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ scikit-learn
try:
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.metrics import mean_absolute_error, r2_score
    from sklearn.linear_model import LinearRegression
    from sklearn.preprocessing import PolynomialFeatures
    SKLEARN_AVAILABLE = True
except ImportError as e:
    SKLEARN_AVAILABLE = False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ openpyxl
try:
    import openpyxl
    from openpyxl.styles import Font, Alignment
    OPENPYXL_AVAILABLE = True
except ImportError as e:
    OPENPYXL_AVAILABLE = False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ XGBoost
try:
    import xgboost as xgb
    XGBOOST_AVAILABLE = True
except ImportError as e:
    XGBOOST_AVAILABLE = False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ statsmodels
try:
    from statsmodels.tsa.seasonal import seasonal_decompose
    from statsmodels.tsa.arima.model import ARIMA
    from statsmodels.tsa.stattools import adfuller
    STATSMODELS_AVAILABLE = True
except ImportError as e:
    STATSMODELS_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è matplotlib
plt.style.use('default')
plt.rcParams['font.sans-serif'] = ['DejaVu Sans', 'Arial', 'Sans-serif']
plt.rcParams['axes.unicode_minus'] = False

class MedicalAnalysisSystem:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ v1.2 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)")
        self.root.geometry("1400x800")
        self.gemini_api_key = None
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.current_data = None
        self.processed_data = None
        self.forecast_results = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_menu()
        self.create_toolbar()
        self.create_main_interface()
        self.create_status_bar()
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        self.apply_theme()
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        try:
            self.db_path = "medical_data.db"
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS analysis_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    date TEXT,
                    analysis_type TEXT,
                    parameters TEXT,
                    results TEXT
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ë–î", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.load_data)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", command=self.save_results)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ú–µ–Ω—é –ê–Ω–∞–ª–∏–∑
        analysis_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ê–Ω–∞–ª–∏–∑", menu=analysis_menu)
        analysis_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", command=self.analyze_seasonality)
        analysis_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", command=self.analyze_regions)
        analysis_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É", command=self.analyze_age_groups)
        analysis_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π", command=self.analyze_correlation)
        
        # –ú–µ–Ω—é –ü—Ä–æ–≥–Ω–æ–∑
        forecast_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü—Ä–æ–≥–Ω–æ–∑", menu=forecast_menu)
        forecast_menu.add_command(label="–ü—Ä–æ–≥–Ω–æ–∑ SARIMA", command=self.forecast_sarima)
        if SKLEARN_AVAILABLE:
            forecast_menu.add_command(label="–ü—Ä–æ–≥–Ω–æ–∑ ML (Random Forest)", command=self.forecast_ml)
            forecast_menu.add_command(label="–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", command=self.forecast_linear_regression)
        if XGBOOST_AVAILABLE:
            forecast_menu.add_command(label="–ü—Ä–æ–≥–Ω–æ–∑ XGBoost", command=self.forecast_xgboost)
        
    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar = ttk.Frame(self.root)
        toolbar.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        ttk.Button(toolbar, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_data).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_results).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üìä –ê–Ω–∞–ª–∏–∑", command=self.quick_analysis).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="ü§ñ Gemini –ê–Ω–∞–ª–∏–∑", command=self.analyze_with_gemini).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üìà –ü—Ä–æ–≥–Ω–æ–∑", command=self.quick_forecast).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üìÑ –û—Ç—á–µ—Ç", command=self.generate_report).pack(side=tk.LEFT, padx=2)
        ttk.Button(toolbar, text="üîÑ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤", command=self.reset_filters).pack(side=tk.LEFT, padx=2)
        
    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_container)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ "–î–∞–Ω–Ω—ã–µ"
        self.data_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.data_frame, text="–î–∞–Ω–Ω—ã–µ")
        self.create_data_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ê–Ω–∞–ª–∏–∑"
        self.analysis_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.analysis_frame, text="–ê–Ω–∞–ª–∏–∑")
        self.create_analysis_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü—Ä–æ–≥–Ω–æ–∑—ã"
        self.forecast_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.forecast_frame, text="–ü—Ä–æ–≥–Ω–æ–∑—ã")
        self.create_forecast_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–û—Ç—á–µ—Ç—ã"
        self.report_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.report_frame, text="–û—Ç—á–µ—Ç—ã")
        self.create_report_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ö–∞—Ä—Ç—ã" 
        self.map_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.map_frame, text="–ö–∞—Ä—Ç—ã")
        self.create_map_tab()
        
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        style = ttk.Style()
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–µ–º—É
        available_themes = style.theme_names()
        if 'clam' in available_themes:
            style.theme_use('clam')
        elif 'alt' in available_themes:
            style.theme_use('alt')
        else:
            style.theme_use(available_themes[0])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        try:
            style.configure('TLabel', background='#f0f0f0')
            style.configure('TFrame', background='#f0f0f0')
            style.configure('TLabelframe', background='#f0f0f0')
            style.configure('TLabelframe.Label', background='#f0f0f0', foreground='#333333')
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π
        
    def create_data_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = ttk.LabelFrame(self.data_frame, text="–§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
        control_panel.pack(fill=tk.X, padx=5, pady=5)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_frame1 = ttk.Frame(control_panel)
        filter_frame1.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(filter_frame1, text="–ü–µ—Ä–∏–æ–¥ —Å:").pack(side=tk.LEFT, padx=5)
        self.date_from = ttk.Entry(filter_frame1, width=12)
        self.date_from.pack(side=tk.LEFT, padx=2)
        self.date_from.insert(0, "2020-01-01")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        ttk.Label(filter_frame1, text="–ø–æ:").pack(side=tk.LEFT, padx=5)
        self.date_to = ttk.Entry(filter_frame1, width=12)
        self.date_to.pack(side=tk.LEFT, padx=2)
        self.date_to.insert(0, "2024-12-31")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        ttk.Label(filter_frame1, text="–†–µ–≥–∏–æ–Ω:").pack(side=tk.LEFT, padx=(15, 5))
        self.region_var = tk.StringVar(value="–í—Å–µ")
        self.region_combo = ttk.Combobox(filter_frame1, textvariable=self.region_var, width=15)
        self.region_combo['values'] = ['–í—Å–µ']
        self.region_combo.pack(side=tk.LEFT, padx=2)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        filter_frame2 = ttk.Frame(control_panel)
        filter_frame2.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(filter_frame2, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", command=self.apply_filters).pack(side=tk.LEFT, padx=5)
        ttk.Button(filter_frame2, text="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", command=self.reset_filters).pack(side=tk.LEFT, padx=5)
        ttk.Button(filter_frame2, text="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", command=self.export_filtered_data).pack(side=tk.LEFT, padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.Frame(filter_frame2)
        info_frame.pack(side=tk.RIGHT, padx=5)
        ttk.Label(info_frame, text="üí° –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD", foreground="gray").pack()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
        self.create_data_table()
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_panel = ttk.LabelFrame(self.data_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_panel.pack(fill=tk.X, padx=5, pady=5)
        
        self.stats_text = tk.Text(stats_panel, height=6, wrap=tk.WORD, state=tk.DISABLED)
        stats_scroll = ttk.Scrollbar(stats_panel, orient="vertical", command=self.stats_text.yview)
        self.stats_text.configure(yscrollcommand=stats_scroll.set)
        
        self.stats_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        stats_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
    def create_data_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_frame = ttk.LabelFrame(self.data_frame, text="–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
        table_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview
        columns = ('ID', '–î–∞—Ç–∞', '–†–µ–≥–∏–æ–Ω', '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        self.data_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {'ID': 50, '–î–∞—Ç–∞': 100, '–†–µ–≥–∏–æ–Ω': 120, '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ': 120, 
                        '–í–æ–∑—Ä–∞—Å—Ç': 80, '–ü–æ–ª': 50, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 100}
        
        for col in columns:
            self.data_tree.heading(col, text=col, command=lambda c=col: self.sort_treeview(c))
            self.data_tree.column(col, width=column_widths.get(col, 100), minwidth=50)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        vsb = ttk.Scrollbar(table_frame, orient="vertical", command=self.data_tree.yview)
        hsb = ttk.Scrollbar(table_frame, orient="horizontal", command=self.data_tree.xview)
        self.data_tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.data_tree.grid(row=0, column=0, sticky='nsew')
        vsb.grid(row=0, column=1, sticky='ns')
        hsb.grid(row=1, column=0, sticky='ew')
        
        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
        info_label = ttk.Label(table_frame, text="–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.")
        info_label.grid(row=2, column=0, columnspan=2, pady=5)

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_bar = ttk.Frame(self.root)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(self.status_bar, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", relief=tk.SUNKEN)
        self.status_label.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        
        # –°—á–µ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π
        self.records_label = ttk.Label(self.status_bar, text="–ó–∞–ø–∏—Å–µ–π: 0", relief=tk.SUNKEN, width=15)
        self.records_label.pack(side=tk.LEFT, padx=2)
        
        # –í—Ä–µ–º—è
        self.time_label = ttk.Label(self.status_bar, text="", relief=tk.SUNKEN, width=20)
        self.time_label.pack(side=tk.LEFT, padx=2)
        
        # –í–µ—Ä—Å–∏—è
        version_label = ttk.Label(self.status_bar, text="v1.2", relief=tk.SUNKEN, width=8)
        version_label.pack(side=tk.LEFT, padx=2)
        
        self.update_time()
        
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.time_label.config(text=current_time)
        self.root.after(1000, self.update_time)

    def sort_treeview(self, col):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∫–æ–ª–æ–Ω–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            data = [(self.data_tree.set(child, col), child) for child in self.data_tree.get_children('')]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if col in ['ID', '–í–æ–∑—Ä–∞—Å—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']:
                # –ß–∏—Å–ª–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                data.sort(key=lambda x: float(x[0]) if x[0].replace('.', '').replace('-', '').isdigit() else 0)
            else:
                # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                data.sort(key=lambda x: x[0].lower())
            
            # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            for index, (val, child) in enumerate(data):
                self.data_tree.move(child, '', index)
                
            self.update_status(f"–¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ: {col}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ: {str(e)}")
    
    def reset_filters(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            self.date_from.delete(0, tk.END)
            self.date_from.insert(0, "2020-01-01")

            self.date_to.delete(0, tk.END)
            self.date_to.insert(0, "2024-12-31")

            self.region_var.set("–í—Å–µ")

            if hasattr(self, 'analysis_region_var'):
                self.analysis_region_var.set('–í—Å–µ')
            if hasattr(self, 'analysis_date_from'):
                self.analysis_date_from.delete(0, tk.END)
                self.analysis_date_from.insert(0, "2020-01-01")
            if hasattr(self, 'analysis_date_to'):
                self.analysis_date_to.delete(0, tk.END)
                self.analysis_date_to.insert(0, "2024-12-31")
            if hasattr(self, 'forecast_region_var'):
                self.forecast_region_var.set('–í—Å–µ')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            if self.current_data is not None:
                self.update_data_display()
                self.update_status("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {str(e)}")
    
    def export_filtered_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
        
        data_to_export = self.processed_data if self.processed_data is not None else self.current_data
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("Excel —Ñ–∞–π–ª—ã", "*.xlsx")],
            title="–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        )
        
        if filename:
            try:
                if filename.endswith('.csv'):
                    data_to_export.to_csv(filename, index=False, encoding='utf-8')
                else:
                    data_to_export.to_excel(filename, index=False)
                    
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {os.path.basename(filename)}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
                
    def create_map_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –∫–∞—Ä—Ç–∞–º–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π
        map_control_panel = ttk.LabelFrame(self.map_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Ä—Ç—ã")
        map_control_panel.pack(fill=tk.X, padx=5, pady=5)
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
        ttk.Label(map_control_panel, text="–¢–∏–ø –∫–∞—Ä—Ç—ã:").grid(row=0, column=0, padx=5, pady=5, sticky='w')
        self.map_type = tk.StringVar(value="regional")
        map_types = [
            ("–ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º", "regional"),
            ("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è", "density"),
            ("–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", "temporal")
        ]
        
        col = 1
        for text, value in map_types:
            ttk.Radiobutton(map_control_panel, text=text, variable=self.map_type, 
                        value=value).grid(row=0, column=col, padx=5)
            col += 1
        
        # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        ttk.Label(map_control_panel, text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å:").grid(row=1, column=0, padx=5, pady=5, sticky='w')
        self.map_metric = tk.StringVar()
        self.metric_combo = ttk.Combobox(map_control_panel, textvariable=self.map_metric, width=20, state="readonly")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_metrics = ['–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤', '–ù–∞ 100–ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è', '–¢–µ–º–ø —Ä–æ—Å—Ç–∞', '–°—Ä–µ–¥–Ω—è—è —Ç—è–∂–µ—Å—Ç—å']
        self.metric_combo['values'] = default_metrics
        self.metric_combo.set('–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.metric_combo.grid(row=1, column=1, padx=5, pady=5, sticky='w')
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        ttk.Label(map_control_panel, text="–ü–µ—Ä–∏–æ–¥:").grid(row=1, column=2, padx=5, pady=5, sticky='w')
        self.map_period = tk.StringVar()
        self.period_combo = ttk.Combobox(map_control_panel, textvariable=self.map_period, width=15, state="readonly")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_periods = ['2024', '2023', '2022', '2021', '2020', '–í—Å–µ –≥–æ–¥—ã']
        self.period_combo['values'] = default_periods
        self.period_combo.set('2024')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.period_combo.grid(row=1, column=3, padx=5, pady=5, sticky='w')
        
        # –í—ã–±–æ—Ä –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        ttk.Label(map_control_panel, text="–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ:").grid(row=2, column=0, padx=5, pady=5, sticky='w')
        self.map_disease = tk.StringVar()
        self.disease_map_combo = ttk.Combobox(map_control_panel, textvariable=self.map_disease, width=20, state="readonly")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.disease_map_combo['values'] = ['–í—Å–µ']
        self.disease_map_combo.set('–í—Å–µ')
        self.disease_map_combo.grid(row=2, column=1, padx=5, pady=5, sticky='w')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(map_control_panel, text="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É", 
                command=self.build_map).grid(row=2, column=2, padx=10, pady=5)
        
        ttk.Button(map_control_panel, text="–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", 
                command=self.update_map_filters).grid(row=2, column=3, padx=5, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∫–∞—Ä—Ç—ã
        self.map_plot_frame = ttk.LabelFrame(self.map_frame, text="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞")
        self.map_plot_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ü–∞–Ω–µ–ª—å –ª–µ–≥–µ–Ω–¥—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        legend_panel = ttk.LabelFrame(self.map_frame, text="–õ–µ–≥–µ–Ω–¥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        legend_panel.pack(fill=tk.X, padx=5, pady=5)
        
        self.map_stats_text = tk.Text(legend_panel, height=4, wrap=tk.WORD)
        map_stats_scroll = ttk.Scrollbar(legend_panel, orient="vertical", command=self.map_stats_text.yview)
        self.map_stats_text.configure(yscrollcommand=map_stats_scroll.set)
        
        self.map_stats_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        map_stats_scroll.pack(side=tk.RIGHT, fill=tk.Y)

    def update_map_filters(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
            return
            
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã
            current_metric = self.map_metric.get()
            current_period = self.map_period.get()
            current_disease = self.map_disease.get()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            metrics = ['–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤', '–ù–∞ 100–ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è', '–¢–µ–º–ø —Ä–æ—Å—Ç–∞', '–°—Ä–µ–¥–Ω—è—è —Ç—è–∂–µ—Å—Ç—å']
            self.metric_combo['values'] = metrics
            if current_metric in metrics:
                self.map_metric.set(current_metric)
            else:
                self.map_metric.set('–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
            if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in self.current_data.columns:
                diseases = ['–í—Å–µ'] + sorted(self.current_data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].dropna().unique().tolist())
                self.disease_map_combo['values'] = diseases
                if current_disease in diseases:
                    self.map_disease.set(current_disease)
                else:
                    self.map_disease.set('–í—Å–µ')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if '–î–∞—Ç–∞' in self.current_data.columns:
                try:
                    dates = pd.to_datetime(self.current_data['–î–∞—Ç–∞'], errors='coerce')
                    years = sorted(dates.dt.year.dropna().unique(), reverse=True)
                    year_list = [str(int(year)) for year in years] + ['–í—Å–µ –≥–æ–¥—ã']
                    self.period_combo['values'] = year_list
                    
                    if current_period in year_list:
                        self.map_period.set(current_period)
                    elif len(years) > 0:
                        self.map_period.set(str(int(years[0])))
                    else:
                        self.map_period.set('2024')
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç: {e}")
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    default_periods = ['2024', '2023', '2022', '2021', '2020', '–í—Å–µ –≥–æ–¥—ã']
                    self.period_combo['values'] = default_periods
                    if current_period in default_periods:
                        self.map_period.set(current_period)
                    else:
                        self.map_period.set('2024')
            
            self.update_status("–§–∏–ª—å—Ç—Ä—ã –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞—Ä—Ç—ã: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.metric_combo['values'] = ['–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤', '–ù–∞ 100–ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è', '–¢–µ–º–ø —Ä–æ—Å—Ç–∞', '–°—Ä–µ–¥–Ω—è—è —Ç—è–∂–µ—Å—Ç—å']
            self.metric_combo.set('–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤')
            self.period_combo['values'] = ['2024', '2023', '2022', '2021', '2020', '–í—Å–µ –≥–æ–¥—ã']
            self.period_combo.set('2024')
            self.disease_map_combo['values'] = ['–í—Å–µ']
            self.disease_map_combo.set('–í—Å–µ')
    
    def create_analysis_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis_panel = ttk.LabelFrame(self.analysis_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        analysis_panel.pack(fill=tk.X, padx=5, pady=5)
        
        # –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        ttk.Label(analysis_panel, text="–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:").grid(row=0, column=0, padx=5, pady=5, sticky='w')
        self.analysis_type = tk.StringVar(value="seasonality")
        analysis_types = [
            ("–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", "seasonality"),
            ("–ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º", "regions"),
            ("–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º", "age_groups"),
            ("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", "correlation")
        ]
        
        col = 1
        for text, value in analysis_types:
            ttk.Radiobutton(analysis_panel, text=text, variable=self.analysis_type, 
                          value=value).grid(row=0, column=col, padx=5, sticky='w')
            col += 1
        
        # –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        ttk.Label(analysis_panel, text="–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ:").grid(row=1, column=0, padx=5, pady=5, sticky='w')
        self.disease_var = tk.StringVar(value="–í—Å–µ")
        self.disease_combo = ttk.Combobox(analysis_panel, textvariable=self.disease_var, width=20)
        self.disease_combo['values'] = ['–í—Å–µ']
        self.disease_combo.grid(row=1, column=1, columnspan=2, padx=5, pady=5, sticky='w')
        
        ttk.Button(analysis_panel, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑", 
                  command=self.perform_analysis).grid(row=1, column=3, padx=5, pady=5)
        
        ttk.Button(analysis_panel, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
                  command=self.save_analysis_plot).grid(row=1, column=4, padx=5, pady=5)

        # –†–µ–≥–∏–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        ttk.Label(analysis_panel, text="–†–µ–≥–∏–æ–Ω:").grid(row=2, column=0, padx=5, pady=5, sticky='w')
        self.analysis_region_var = tk.StringVar(value="–í—Å–µ")
        self.analysis_region_combo = ttk.Combobox(analysis_panel, textvariable=self.analysis_region_var, width=20)
        self.analysis_region_combo['values'] = ['–í—Å–µ']
        self.analysis_region_combo.grid(row=2, column=1, columnspan=2, padx=5, pady=5, sticky='w')

        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        ttk.Label(analysis_panel, text="–ü–µ—Ä–∏–æ–¥ —Å:").grid(row=2, column=3, padx=5, pady=5, sticky='e')
        self.analysis_date_from = ttk.Entry(analysis_panel, width=12)
        self.analysis_date_from.grid(row=2, column=4, padx=2, pady=5, sticky='w')
        self.analysis_date_from.insert(0, "2020-01-01")

        ttk.Label(analysis_panel, text="–ø–æ:").grid(row=2, column=5, padx=5, pady=5, sticky='e')
        self.analysis_date_to = ttk.Entry(analysis_panel, width=12)
        self.analysis_date_to.grid(row=2, column=6, padx=2, pady=5, sticky='w')
        self.analysis_date_to.insert(0, "2024-12-31")

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.analysis_plot_frame = ttk.LabelFrame(self.analysis_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        self.analysis_plot_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_label = ttk.Label(self.analysis_plot_frame, 
                              text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑'", 
                              font=('Arial', 12))
        info_label.pack(expand=True)
        
        try:
            import xgboost as xgb
            XGBOOST_AVAILABLE = True
        except ImportError:
            XGBOOST_AVAILABLE = False
            print("–í–Ω–∏–º–∞–Ω–∏–µ: XGBoost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. XGBoost –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

        try:
            from statsmodels.tsa.seasonal import seasonal_decompose
            from statsmodels.tsa.arima.model import ARIMA
            from statsmodels.tsa.stattools import adfuller
            STATSMODELS_AVAILABLE = True
        except ImportError:
            STATSMODELS_AVAILABLE = False
            print("–í–Ω–∏–º–∞–Ω–∏–µ: statsmodels –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. SARIMA –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.")

    def analyze_with_gemini(self):
            if self.current_data is None:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
                return

            # --- –í–ê–® API –ö–õ–Æ–ß ---
            # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–ª—é—á –¥–ª—è Gemini API –ø—Ä—è–º–æ —Å—é–¥–∞.
            # –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º, –µ—Å–ª–∏ –≤ –Ω–µ–º —É–∫–∞–∑–∞–Ω –≤–∞—à –∫–ª—é—á.
            api_key = "AIzaSyC45u9u5NOi2VWUbEvyGWp1Ow2cg0MVS6A"

            if api_key == "YOUR_GEMINI_API_KEY_HERE":
                messagebox.showerror("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Gemini API –∫–ª—é—á –≤ –∫–æ–¥ –≤ –º–µ—Ç–æ–¥–µ 'analyze_with_gemini'.")
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç
            try:
                sample = self.current_data.head(50).to_markdown(index=False)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                return

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Gemini
            try:
                genai.configure(api_key=api_key)
                model = genai.GenerativeModel('gemini-1.5-flash')

                # --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ ---
                # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–ø–∏—Å–∫–æ–≤
                prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤—ã—Å—Ç—É–ø–∏—Ç—å –≤ —Ä–æ–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.

                –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏, –≤—ã—è–≤–∏ –∞–Ω–æ–º–∞–ª–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–æ—Å—ã, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ 2-3 –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
                –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ç–∫–æ. **–î–ª—è –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –¥–µ—Ñ–∏—Å—ã (-) –≤–º–µ—Å—Ç–æ –∑–≤–µ–∑–¥–æ—á–µ–∫ (*).**

                –í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
                1.  **–ö–ª—é—á–µ–≤—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏:**
                    - (–¢–≤–æ–π –∞–Ω–∞–ª–∏–∑ –∑–¥–µ—Å—å)
                2.  **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏:**
                    - (–¢–≤–æ–π –∞–Ω–∞–ª–∏–∑ –∑–¥–µ—Å—å)
                3.  **–ì–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:**
                    - (–¢–≤–æ–∏ –≥–∏–ø–æ—Ç–µ–∑—ã –∑–¥–µ—Å—å)

                –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
                {sample}
                """

                response = model.generate_content(prompt)
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–≤–µ–∑–¥–æ—á–µ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                analysis = response.text.replace('*', '-')

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.show_text_window("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Gemini", analysis)

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞ Gemini", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {str(e)}\n\n"
                                                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á –∏ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")

    def show_text_window(self, title, content):
        window = tk.Toplevel(self.root)
        window.title(title)
        text_area = tk.Text(window, wrap='word')
        text_area.insert(tk.END, content)
        text_area.config(state=tk.DISABLED)
        text_area.pack(expand=True, fill='both')


    def check_libraries_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ runtime"""
        status = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ XGBoost
        try:
            import xgboost as xgb
            status['xgboost'] = True
        except ImportError:
            status['xgboost'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ scikit-learn
        try:
            from sklearn.ensemble import RandomForestRegressor
            status['sklearn'] = True
        except ImportError:
            status['sklearn'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ statsmodels
        try:
            from statsmodels.tsa.arima.model import ARIMA
            status['statsmodels'] = True
        except ImportError:
            status['statsmodels'] = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ openpyxl
        try:
            import openpyxl
            status['openpyxl'] = True
        except ImportError:
            status['openpyxl'] = False
            
        return status

    def show_library_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å macOS —Å–æ–≤–µ—Ç–∞–º–∏"""
        status = self.check_libraries_status()
        
        status_text = "üìä –°–¢–ê–¢–£–° –ë–ò–ë–õ–ò–û–¢–ï–ö:\n" + "="*40 + "\n"
        
        libraries = {
            'sklearn': 'scikit-learn (–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)', 
            'xgboost': 'XGBoost (–≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥)',
            'statsmodels': 'statsmodels (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã)',
            'openpyxl': 'openpyxl (—ç–∫—Å–ø–æ—Ä—Ç –≤ Excel)'
        }
        
        available_count = 0
        for key, name in libraries.items():
            if status[key]:
                icon = "‚úÖ"
                available_count += 1
            else:
                icon = "‚ùå"
            status_text += f"{icon} {name}\n"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è macOS –∏ XGBoost
        import platform
        if not status['xgboost'] and platform.system() == "Darwin":
            status_text += "\nüçé –ü–†–û–ë–õ–ï–ú–ê macOS + XGBoost:\n"
            status_text += "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenMP: brew install libomp\n"
        
        status_text += f"\nüìà –ü–†–û–ì–†–ï–°–°: {available_count}/4 –±–∏–±–ª–∏–æ—Ç–µ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n"
        
        status_text += "üöÄ –î–û–°–¢–£–ü–ù–´–ï –ú–û–î–ï–õ–ò:\n"
        status_text += "‚úÖ SARIMA (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)\n"
        
        if status['sklearn']:
            status_text += "‚úÖ Linear Regression\n"
            status_text += "‚úÖ Random Forest\n"
        else:
            status_text += "‚ùå Linear Regression (–Ω—É–∂–µ–Ω scikit-learn)\n"
            status_text += "‚ùå Random Forest (–Ω—É–∂–µ–Ω scikit-learn)\n"
        
        if status['xgboost']:
            status_text += "‚úÖ XGBoost\n"
        else:
            status_text += "‚ùå XGBoost (–Ω—É–∂–µ–Ω OpenMP: brew install libomp)\n"
        
        status_text += "\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞–∂–º–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        result = messagebox.askyesno("–°—Ç–∞—Ç—É—Å –±–∏–±–ª–∏–æ—Ç–µ–∫", status_text)
        
        if result:
            self.diagnose_xgboost_issue()
        
    def diagnose_xgboost_issue(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å XGBoost"""
        import platform
        import sys
        
        diag_text = f"""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                  –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê XGBOOST                 ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    üñ•Ô∏è  –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}
    üêç  Python: {sys.version}
    üìç  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}

    üîç –°–¢–ê–¢–£–° –ë–ò–ë–õ–ò–û–¢–ï–ö:
    """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        libraries = {
            'XGBoost': 'xgboost',
            'scikit-learn': 'sklearn',
            'statsmodels': 'statsmodels',
            'OpenMP (–¥–ª—è XGBoost)': None  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        }
        
        for name, module in libraries.items():
            if module is None:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenMP
                try:
                    import xgboost as xgb
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å
                    test_model = xgb.XGBRegressor(n_estimators=1)
                    XGBOOST_AVAILABLE = True
                    print("‚úÖ XGBoost –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except ImportError as e:
                    XGBOOST_AVAILABLE = False
                    print(f"‚ùå XGBoost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
                except Exception as e:
                    XGBOOST_AVAILABLE = False
                    error_msg = str(e)
                    if "OpenMP" in error_msg or "libomp" in error_msg:
                        print("‚ùå XGBoost: –û—à–∏–±–∫–∞ OpenMP runtime –Ω–∞ macOS")
                        print("üí° –†–µ—à–µ–Ω–∏–µ: brew install libomp")
                    else:
                        print(f"‚ùå XGBoost: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
        
        if platform.system() == "Darwin":  # macOS
            diag_text += f"""

    üçé –°–ü–ï–¶–ò–ê–õ–¨–ù–û –î–õ–Ø macOS:
    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

    –ï—Å–ª–∏ XGBoost –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:

    1Ô∏è‚É£  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew (–µ—Å–ª–∏ –Ω–µ—Ç):
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    2Ô∏è‚É£  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenMP:
    brew install libomp

    3Ô∏è‚É£  –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ XGBoost:
    pip uninstall xgboost
    pip install xgboost

    4Ô∏è‚É£  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É

    üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Random Forest –≤–º–µ—Å—Ç–æ XGBoost
    ‚Ä¢ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ XGBoost
    """
        
        diag_text += f"""

    üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
    ‚Ä¢ SARIMA: –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    ‚Ä¢ Linear Regression: {'‚úÖ' if globals().get('SKLEARN_AVAILABLE', False) else '‚ùå'}
    ‚Ä¢ Random Forest: {'‚úÖ' if globals().get('SKLEARN_AVAILABLE', False) else '‚ùå'}
    ‚Ä¢ XGBoost: {'‚úÖ' if globals().get('XGBOOST_AVAILABLE', False) else '‚ùå'}

    ‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –±–µ–∑ XGBoost!
    """
        
        messagebox.showinfo("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ XGBoost", diag_text)
        
    def create_forecast_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –ü–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        forecast_panel = ttk.LabelFrame(self.forecast_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        forecast_panel.pack(fill=tk.X, padx=5, pady=5)
        
        # –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        ttk.Label(forecast_panel, text="–ú–æ–¥–µ–ª—å:").grid(row=0, column=0, padx=5, pady=5, sticky='w')
        
        self.model_var = tk.StringVar(value="SARIMA")
        model_combo = ttk.Combobox(forecast_panel, textvariable=self.model_var, width=15, state="readonly")
        available_models = ['SARIMA', 'Linear Regression', 'Random Forest', 'XGBoost']
        model_combo['values'] = available_models
        model_combo.grid(row=0, column=1, padx=5, pady=5, sticky='w')
        
        ttk.Label(forecast_panel, text="–ü–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü–µ–≤):").grid(row=0, column=2, padx=5, pady=5, sticky='w')
        
        self.forecast_period = tk.IntVar(value=6)
        period_spin = ttk.Spinbox(forecast_panel, from_=1, to=24, textvariable=self.forecast_period, width=8)
        period_spin.grid(row=0, column=3, padx=5, pady=5, sticky='w')
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Label(forecast_panel, text="–†–µ–≥–∏–æ–Ω:").grid(row=0, column=4, padx=5, pady=5, sticky='w')
        self.forecast_region_var = tk.StringVar(value="–í—Å–µ")
        self.forecast_region_combo = ttk.Combobox(forecast_panel, textvariable=self.forecast_region_var, width=20)
        self.forecast_region_combo['values'] = ['–í—Å–µ']
        self.forecast_region_combo.grid(row=0, column=5, padx=5, pady=5, sticky='w')

        ttk.Button(forecast_panel, text="üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑",
                command=self.build_forecast).grid(row=0, column=6, padx=10, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.forecast_plot_frame = ttk.LabelFrame(self.forecast_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.forecast_plot_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.Frame(self.forecast_plot_frame)
        info_frame.pack(expand=True, fill='both')
        
        info_label = ttk.Label(info_frame, 
                            text="üéØ –°–ò–°–¢–ï–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–ò\n\n"
                                "üìà –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞\n"
                                "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –±–∏–±–ª–∏–æ—Ç–µ–∫ ML –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
                                "üöÄ –ù–∞–∂–º–∏—Ç–µ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞\n\n"
                                "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:\n"
                                "‚Ä¢ SARIMA: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã —Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é –∏ —Ç—Ä–µ–Ω–¥–æ–º\n"
                                "‚Ä¢ Linear Regression: –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å —Å–µ–∑–æ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏\n" 
                                "‚Ä¢ Random Forest: –ê–Ω—Å–∞–º–±–ª—å –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π\n"
                                "‚Ä¢ XGBoost: –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏", 
                            font=('Arial', 12), justify='center', foreground='#2c3e50')
        info_label.pack(expand=True)
        
        # –ù–∏–∂–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        bottom_info = ttk.Label(info_frame, 
                            text="üí° –°–æ–≤–µ—Ç: –î–ª—è –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω–æ–π —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SARIMA, –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ - XGBoost", 
                            font=('Arial', 10), foreground='#7f8c8d', justify='center')
        bottom_info.pack(side='bottom', pady=10)
        
    def create_report_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—á–µ—Ç–∞
        report_panel = ttk.LabelFrame(self.report_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞")
        report_panel.pack(fill=tk.X, padx=5, pady=5)
        
        # –¢–∏–ø –æ—Ç—á–µ—Ç–∞
        ttk.Label(report_panel, text="–¢–∏–ø –æ—Ç—á–µ—Ç–∞:").grid(row=0, column=0, padx=5, pady=5, sticky='w')
        self.report_type = tk.StringVar(value="summary")
        report_types = [
            ("–°–≤–æ–¥–Ω—ã–π", "summary"),
            ("–î–µ—Ç–∞–ª—å–Ω—ã–π", "detailed"),
            ("–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π", "forecast"),
            ("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π", "comparative")
        ]
        
        col = 1
        for text, value in report_types:
            ttk.Radiobutton(report_panel, text=text, variable=self.report_type, 
                          value=value).grid(row=0, column=col, padx=5, sticky='w')
            col += 1
        
        # –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
        ttk.Label(report_panel, text="–§–æ—Ä–º–∞—Ç:").grid(row=1, column=0, padx=5, pady=5, sticky='w')
        self.export_format = tk.StringVar(value="HTML")
        format_combo = ttk.Combobox(report_panel, textvariable=self.export_format, width=10)
        format_combo['values'] = ['HTML', 'PDF', 'Excel', 'Word', 'TXT']
        format_combo.grid(row=1, column=1, padx=5, pady=5, sticky='w')
        
        ttk.Button(report_panel, text="–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", 
                  command=self.create_report).grid(row=1, column=2, padx=10, pady=5)
        ttk.Button(report_panel, text="–≠–∫—Å–ø–æ—Ä—Ç", 
                  command=self.export_report).grid(row=1, column=3, padx=5, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_frame = ttk.LabelFrame(self.report_frame, text="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        preview_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_frame = ttk.Frame(preview_frame)
        text_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.report_text = tk.Text(text_frame, wrap=tk.WORD, font=('Courier New', 10))
        report_scroll = ttk.Scrollbar(text_frame, command=self.report_text.yview)
        self.report_text.configure(yscrollcommand=report_scroll.set)
        
        self.report_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        report_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        welcome_text = """
        –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ó–ê–ë–û–õ–ï–í–ê–ù–ò–ô –ù–ê–°–ï–õ–ï–ù–ò–Ø –ö–ê–ó–ê–•–°–¢–ê–ù–ê
        ================================================
        
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö!
        
        –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª–∞–¥–∫–∞ "–î–∞–Ω–Ω—ã–µ")
        2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        3. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"
        4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤:
        ‚Ä¢ –°–≤–æ–¥–Ω—ã–π - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
        ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π - –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –ø–µ—Ä–∏–æ–¥–∞–º
        ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        ‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π - —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –ø–µ—Ä–∏–æ–¥–æ–≤
        """
        
        self.report_text.insert(1.0, welcome_text)
        self.report_text.config(state=tk.DISABLED)
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö",
            filetypes=[
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"), 
                ("Excel —Ñ–∞–π–ª—ã", "*.xlsx *.xls"), 
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if filename:
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.update_status("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                self.root.update()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
                if filename.lower().endswith('.csv'):
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                    encodings = ['utf-8', 'cp1251', 'latin-1']
                    data_loaded = False
                    
                    for encoding in encodings:
                        try:
                            self.current_data = pd.read_csv(filename, encoding=encoding)
                            data_loaded = True
                            break
                        except UnicodeDecodeError:
                            continue
                    
                    if not data_loaded:
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞")
                        
                elif filename.lower().endswith(('.xlsx', '.xls')):
                    self.current_data = pd.read_excel(filename)
                else:
                    raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")

                # –ê–≤—Ç–æ–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                if '–î–∞—Ç–∞' not in self.current_data.columns and '–î–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ–∑–∞' in self.current_data.columns:
                    self.current_data['–î–∞—Ç–∞'] = self.current_data['–î–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ–∑–∞']
                if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' not in self.current_data.columns and '–ö–æ–¥ –ú–ö–ë-10' in self.current_data.columns:
                    self.current_data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'] = self.current_data['–ö–æ–¥ –ú–ö–ë-10']
                if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' not in self.current_data.columns:
                    # –ï—Å–ª–∏ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Å–ª—É—á–∞–π
                    self.current_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = 1
                if 'ID' not in self.current_data.columns:
                    self.current_data.reset_index(inplace=True)
                    self.current_data.rename(columns={'index': 'ID'}, inplace=True)
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                is_valid, message = self.validate_data_format(self.current_data)
                if not is_valid:
                    messagebox.showerror("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö:\n{message}")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.update_data_display()
                self.update_filters()
                self.update_map_filters()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ä—Ç—ã
                
                self.update_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.current_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {os.path.basename(filename)}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n–ó–∞–ø–∏—Å–µ–π: {len(self.current_data)}")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:\n{str(e)}"
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                self.update_status("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    def validate_data_format(self, data):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        required_columns = ['–î–∞—Ç–∞', '–†–µ–≥–∏–æ–Ω', '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        missing_columns = [col for col in required_columns if col not in data.columns]
        
        if missing_columns:
            return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        try:
            pd.to_datetime(data['–î–∞—Ç–∞'])
        except:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–æ–Ω–∫–∏ '–î–∞—Ç–∞'. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."
        
        if not pd.api.types.is_numeric_dtype(data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']):
            try:
                data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = pd.to_numeric(data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], errors='coerce')
                if data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].isna().all():
                    return False, "–ö–æ–ª–æ–Ω–∫–∞ '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
            except:
                return False, "–ö–æ–ª–æ–Ω–∫–∞ '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
        
        return True, "–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"

    def apply_filters(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏!")
            return
            
        try:
            filtered_data = self.current_data.copy()
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É
            region_filter = self.region_var.get()
            if region_filter and region_filter != '–í—Å–µ' and region_filter in filtered_data['–†–µ–≥–∏–æ–Ω'].values:
                filtered_data = filtered_data[filtered_data['–†–µ–≥–∏–æ–Ω'] == region_filter]
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
            date_from = self.date_from.get().strip()
            date_to = self.date_to.get().strip()
            
            if date_from:
                try:
                    date_from_parsed = pd.to_datetime(date_from)
                    filtered_data = filtered_data[pd.to_datetime(filtered_data['–î–∞—Ç–∞']) >= date_from_parsed]
                except Exception as e:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                         f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '–æ—Ç': {date_from}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
                    return
            
            if date_to:
                try:
                    date_to_parsed = pd.to_datetime(date_to)
                    filtered_data = filtered_data[pd.to_datetime(filtered_data['–î–∞—Ç–∞']) <= date_to_parsed]
                except Exception as e:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                         f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '–¥–æ': {date_to}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if len(filtered_data) == 0:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            self.processed_data = filtered_data
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.update_filtered_data_display(filtered_data)
            
            self.update_status(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã. –ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_data)} –∏–∑ {len(self.current_data)} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {str(e)}")
    
    def update_filtered_data_display(self, filtered_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.data_tree.get_children():
                self.data_tree.delete(item)
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π)
            display_data = filtered_data.head(1000)
            
            for idx, row in display_data.iterrows():
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                values = []
                for col in ['ID', '–î–∞—Ç–∞', '–†–µ–≥–∏–æ–Ω', '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']:
                    if col in row.index:
                        value = row[col]
                        if pd.isna(value):
                            values.append('')
                        else:
                            values.append(str(value))
                    else:
                        values.append('')
                
                self.data_tree.insert('', 'end', values=values)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.update_filtered_statistics(filtered_data)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                
    def update_data_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.data_tree.get_children():
                self.data_tree.delete(item)
            
            if self.current_data is not None:
                # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π)
                display_data = self.current_data.head(1000)
                
                for idx, row in display_data.iterrows():
                    values = []
                    for col in ['ID', '–î–∞—Ç–∞', '–†–µ–≥–∏–æ–Ω', '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']:
                        if col in row.index:
                            value = row[col]
                            if pd.isna(value):
                                values.append('')
                            else:
                                values.append(str(value))
                        else:
                            values.append('')
                    
                    self.data_tree.insert('', 'end', values=values)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.update_statistics()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                self.update_filters()
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            
    def update_filters(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            if self.current_data is not None:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
                if '–†–µ–≥–∏–æ–Ω' in self.current_data.columns:
                    regions = ['–í—Å–µ'] + sorted(self.current_data['–†–µ–≥–∏–æ–Ω'].dropna().unique().tolist())
                    self.region_combo['values'] = regions
                    if self.region_var.get() not in regions:
                        self.region_var.set('–í—Å–µ')

                    if hasattr(self, 'forecast_region_combo'):
                        self.forecast_region_combo['values'] = regions
                        if self.forecast_region_var.get() not in regions:
                            self.forecast_region_var.set('–í—Å–µ')

                    if hasattr(self, 'analysis_region_combo'):
                        self.analysis_region_combo['values'] = regions
                        if self.analysis_region_var.get() not in regions:
                            self.analysis_region_var.set('–í—Å–µ')
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
                if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in self.current_data.columns:
                    diseases = ['–í—Å–µ'] + sorted(self.current_data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].dropna().unique().tolist())
                    self.disease_combo['values'] = diseases
                    if self.disease_var.get() not in diseases:
                        self.disease_var.set('–í—Å–µ')
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_label.config(text=message)
        
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            if self.current_data is not None:
                self.stats_text.config(state=tk.NORMAL)
                self.stats_text.delete(1.0, tk.END)
                
                # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_records = len(self.current_data)
                
                # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
                try:
                    dates = pd.to_datetime(self.current_data['–î–∞—Ç–∞'])
                    date_min = dates.min().strftime('%Y-%m-%d')
                    date_max = dates.max().strftime('%Y-%m-%d')
                except:
                    date_min = date_max = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                unique_regions = self.current_data['–†–µ–≥–∏–æ–Ω'].nunique() if '–†–µ–≥–∏–æ–Ω' in self.current_data.columns else 0
                unique_diseases = self.current_data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].nunique() if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in self.current_data.columns else 0
                total_cases = self.current_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum() if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' in self.current_data.columns else 0
                
                stats_text = f"""–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}
‚Ä¢ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {date_min} ‚îÄ {date_max}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: {unique_regions}
‚Ä¢ –¢–∏–ø–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {unique_diseases}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤: {total_cases:,}

üìà –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –ö–æ–ª–æ–Ω–æ–∫: {len(self.current_data.columns)}
‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {self.current_data.memory_usage(deep=True).sum() / 1024 / 1024:.1f} –ú–ë"""

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —Ä–µ–≥–∏–æ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                if '–†–µ–≥–∏–æ–Ω' in self.current_data.columns and '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' in self.current_data.columns:
                    try:
                        top_regions = self.current_data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False).head(3)
                        stats_text += f"\n\nüèÜ –¢–û–ü-3 –†–ï–ì–ò–û–ù–ê:"
                        for i, (region, count) in enumerate(top_regions.items(), 1):
                            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                            stats_text += f"\n{medal} {region}: {count:,}"
                    except:
                        pass
                
                self.stats_text.insert(1.0, stats_text)
                self.stats_text.config(state=tk.DISABLED)
                
                self.records_label.config(text=f"–ó–∞–ø–∏—Å–µ–π: {len(self.current_data)}")
                
        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            self.stats_text.config(state=tk.NORMAL)
            self.stats_text.delete(1.0, tk.END)
            self.stats_text.insert(1.0, error_text)
            self.stats_text.config(state=tk.DISABLED)

    def update_filtered_statistics(self, filtered_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.stats_text.config(state=tk.NORMAL)
            self.stats_text.delete(1.0, tk.END)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_cols = ['–î–∞—Ç–∞', '–†–µ–≥–∏–æ–Ω', '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            missing_cols = [col for col in required_cols if col not in filtered_data.columns]
            
            if missing_cols:
                stats_text = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}"
            else:
                total_records = len(filtered_data)
                
                # –î–∞—Ç—ã
                try:
                    dates = pd.to_datetime(filtered_data['–î–∞—Ç–∞'])
                    date_min = dates.min().strftime('%Y-%m-%d') if not dates.isna().all() else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                    date_max = dates.max().strftime('%Y-%m-%d') if not dates.isna().all() else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                except:
                    date_min = date_max = '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞'
                
                # –†–µ–≥–∏–æ–Ω—ã –∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
                unique_regions = filtered_data['–†–µ–≥–∏–æ–Ω'].nunique()
                unique_diseases = filtered_data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].nunique()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤
                total_cases = filtered_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum() if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' in filtered_data.columns else 0
                
                stats_text = f"""–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {total_records:,}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {date_min} ‚îÄ {date_max}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: {unique_regions}
‚Ä¢ –¢–∏–ø–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {unique_diseases}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤: {total_cases:,}

üèÜ –¢–û–ü-3 –†–ï–ì–ò–û–ù–ê:"""

                # –¢–æ–ø —Ä–µ–≥–∏–æ–Ω—ã
                if '–†–µ–≥–∏–æ–Ω' in filtered_data.columns and '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' in filtered_data.columns:
                    try:
                        top_regions = filtered_data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False).head(3)
                        for i, (region, count) in enumerate(top_regions.items(), 1):
                            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                            stats_text += f"\n{medal} {region}: {count:,}"
                    except:
                        stats_text += "\n–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º
                if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in filtered_data.columns:
                    try:
                        stats_text += f"\n\nüíä –¢–û–ü-3 –ó–ê–ë–û–õ–ï–í–ê–ù–ò–Ø:"
                        top_diseases = filtered_data.groupby('–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False).head(3)
                        for i, (disease, count) in enumerate(top_diseases.items(), 1):
                            medal = "üî¥" if i == 1 else "üü°" if i == 2 else "üü¢"
                            stats_text += f"\n{medal} {disease}: {count:,}"
                    except:
                        pass
            
            self.stats_text.insert(1.0, stats_text)
            self.stats_text.config(state=tk.DISABLED)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π
            self.records_label.config(text=f"–ó–∞–ø–∏—Å–µ–π: {len(filtered_data)}")

        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            self.stats_text.insert(1.0, error_text)
            self.stats_text.config(state=tk.DISABLED)

    def get_analysis_filtered_data(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        if self.current_data is None:
            return pd.DataFrame()

        data = self.current_data.copy()

        # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—é
        disease_filter = self.disease_var.get()
        if disease_filter and disease_filter != '–í—Å–µ' and '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
            data = data[data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'] == disease_filter]

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É
        if hasattr(self, 'analysis_region_var') and '–†–µ–≥–∏–æ–Ω' in data.columns:
            region_filter = self.analysis_region_var.get()
            if region_filter and region_filter != '–í—Å–µ':
                data = data[data['–†–µ–≥–∏–æ–Ω'] == region_filter]

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        if hasattr(self, 'analysis_date_from') and hasattr(self, 'analysis_date_to'):
            date_from = self.analysis_date_from.get().strip()
            date_to = self.analysis_date_to.get().strip()

            if date_from:
                try:
                    date_from_parsed = pd.to_datetime(date_from)
                    data = data[pd.to_datetime(data['–î–∞—Ç–∞']) >= date_from_parsed]
                except Exception:
                    messagebox.showwarning(
                        "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '—Å': {date_from}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
                    return pd.DataFrame()

            if date_to:
                try:
                    date_to_parsed = pd.to_datetime(date_to)
                    data = data[pd.to_datetime(data['–î–∞—Ç–∞']) <= date_to_parsed]
                except Exception:
                    messagebox.showwarning(
                        "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '–ø–æ': {date_to}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
                    return pd.DataFrame()

        return data

    def build_map(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
            return
            
        try:
            # –û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã
            for widget in self.map_plot_frame.winfo_children():
                widget.destroy()
                
            map_type = self.map_type.get()
            
            if map_type == "regional":
                self.build_regional_map()
            elif map_type == "density":
                self.build_density_map()
            elif map_type == "temporal":
                self.build_temporal_map()
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}")

    def build_regional_map(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            period = self.map_period.get()
            metric = self.map_metric.get()
            disease_filter = self.map_disease.get()
            
            data = self.current_data.copy()
            region_filter = getattr(self, 'forecast_region_var', None)
            if region_filter and region_filter != '–í—Å–µ' and '–†–µ–≥–∏–æ–Ω' in data.columns:
                data = data[data['–†–µ–≥–∏–æ–Ω'] == region_filter]
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—é
            if disease_filter != '–í—Å–µ' and '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
                data = data[data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'] == disease_filter]
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
            if period != '–í—Å–µ –≥–æ–¥—ã' and period != '':
                try:
                    data['–ì–æ–¥'] = pd.to_datetime(data['–î–∞—Ç–∞']).dt.year
                    data = data[data['–ì–æ–¥'] == int(period)]
                except:
                    pass
            
            if len(data) == 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                return
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
            if metric == '–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤':
                regional_data = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False)
                title_suffix = "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤"
                color_label = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤"
            elif metric == '–ù–∞ 100–ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è':
                # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–≤ —Ç—ã—Å—è—á–∞—Ö)
                population_data = {
                    '–ê–ª–º–∞—Ç—ã': 2000, '–ê—Å—Ç–∞–Ω–∞': 1200, '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞': 700, '–®—ã–º–∫–µ–Ω—Ç': 1000,
                    '–ê–∫—Ç–æ–±–µ': 500, '–ü–∞–≤–ª–æ–¥–∞—Ä': 350, '–¢–∞—Ä–∞–∑': 400, '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫': 350,
                    '–ö–æ—Å—Ç–∞–Ω–∞–π': 250, '–ê—Ç—ã—Ä–∞—É': 300, '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫': 200, '–ê–∫—Ç–∞—É': 200,
                    '–ö–æ–∫—à–µ—Ç–∞—É': 150, '–°–µ–º–µ–π': 350, '–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω': 200
                }
                regional_totals = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
                regional_data = pd.Series({region: (count / population_data.get(region, 500)) * 100 
                                         for region, count in regional_totals.items()}).sort_values(ascending=False)
                title_suffix = "–ù–∞ 100–ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è"
                color_label = "–°–ª—É—á–∞–µ–≤ –Ω–∞ 100–ö"
            elif metric == '–¢–µ–º–ø —Ä–æ—Å—Ç–∞':
                # –†–∞—Å—á–µ—Ç —Ç–µ–º–ø–∞ —Ä–æ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
                data['–ì–æ–¥'] = pd.to_datetime(data['–î–∞—Ç–∞']).dt.year
                yearly_data = data.groupby(['–†–µ–≥–∏–æ–Ω', '–ì–æ–¥'])['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().unstack(fill_value=0)
                if yearly_data.shape[1] >= 2:
                    last_year = yearly_data.columns[-1]
                    prev_year = yearly_data.columns[-2]
                    regional_data = ((yearly_data[last_year] - yearly_data[prev_year]) / 
                                   yearly_data[prev_year].replace(0, 1) * 100).sort_values(ascending=False)
                    title_suffix = "–¢–µ–º–ø —Ä–æ—Å—Ç–∞ (%)"
                    color_label = "–¢–µ–º–ø —Ä–æ—Å—Ç–∞ (%)"
                else:
                    regional_data = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False)
                    title_suffix = "–î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–µ–º–ø–∞ —Ä–æ—Å—Ç–∞"
                    color_label = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤"
            else:
                regional_data = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].mean().sort_values(ascending=False)
                title_suffix = "–°—Ä–µ–¥–Ω—è—è —Ç—è–∂–µ—Å—Ç—å"
                color_label = "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            colors = plt.cm.Reds(np.linspace(0.3, 1, len(regional_data)))
            bars = ax1.bar(range(len(regional_data)), regional_data.values, color=colors)
            ax1.set_xticks(range(len(regional_data)))
            ax1.set_xticklabels(regional_data.index, rotation=45, ha='right')
            ax1.set_ylabel(color_label)
            ax1.set_title(f'{title_suffix} –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n({period}, {disease_filter})')
            ax1.grid(True, axis='y', alpha=0.3)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for i, (bar, value) in enumerate(zip(bars, regional_data.values)):
                ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + value*0.01,
                        f'{value:,.1f}', ha='center', va='bottom', fontsize=9, rotation=0)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ç–æ–ø-8 —Ä–µ–≥–∏–æ–Ω–æ–≤
            top_regions = regional_data.head(8)
            others = regional_data[8:].sum() if len(regional_data) > 8 else 0
            
            if others > 0:
                plot_data = pd.concat([top_regions, pd.Series([others], index=['–î—Ä—É–≥–∏–µ'])])
            else:
                plot_data = top_regions
            
            if len(plot_data) > 0:
                wedges, texts, autotexts = ax2.pie(plot_data.values, labels=plot_data.index, 
                                                  autopct='%1.1f%%', startangle=90)
                ax2.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n({metric}, {period})')
                
                # –£–ª—É—á—à–∞–µ–º –≤–∏–¥ —Ç–µ–∫—Å—Ç–∞
                for autotext in autotexts:
                    autotext.set_color('white')
                    autotext.set_fontweight('bold')
                    autotext.set_fontsize(8)
            else:
                ax2.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                        ha='center', va='center', transform=ax2.transAxes)
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.map_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if len(regional_data) > 0:
                stats_text = f"""–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–†–¢–ï ({period})
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: {metric}
–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ: {disease_filter}
–í—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(regional_data)}

üèÜ –¢–û–ü-3:
ü•á {regional_data.index[0]}: {regional_data.iloc[0]:,.1f}"""
                
                if len(regional_data) > 1:
                    stats_text += f"\nü•à {regional_data.index[1]}: {regional_data.iloc[1]:,.1f}"
                if len(regional_data) > 2:
                    stats_text += f"\nü•â {regional_data.index[2]}: {regional_data.iloc[2]:,.1f}"
                    
                stats_text += f"""

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {regional_data.mean():,.1f}
‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {regional_data.median():,.1f}
‚Ä¢ –ú–∞–∫—Å/–º–∏–Ω: {regional_data.max():,.1f} / {regional_data.min():,.1f}"""
            else:
                stats_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            
            self.map_stats_text.delete(1.0, tk.END)
            self.map_stats_text.insert(1.0, stats_text)
            
            self.update_status(f"–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞: {metric} –∑–∞ {period}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {str(e)}")
        
    def build_density_map(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ scatter plot –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 8))
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.current_data.copy()
            period = self.map_period.get()
            disease_filter = self.map_disease.get()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if disease_filter != '–í—Å–µ' and '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
                data = data[data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'] == disease_filter]
            
            if period != '–í—Å–µ –≥–æ–¥—ã':
                try:
                    data['–ì–æ–¥'] = pd.to_datetime(data['–î–∞—Ç–∞']).dt.year
                    data = data[data['–ì–æ–¥'] == int(period)]
                except:
                    pass
            
            regional_data = data.groupby('–†–µ–≥–∏–æ–Ω').agg({
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'sum'
            }).reset_index()
            
            if len(regional_data) == 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ –í–æ–∑—Ä–∞—Å—Ç
            if '–í–æ–∑—Ä–∞—Å—Ç' in data.columns:
                avg_age = data.groupby('–†–µ–≥–∏–æ–Ω')['–í–æ–∑—Ä–∞—Å—Ç'].mean()
                regional_data = regional_data.merge(avg_age.reset_index(), on='–†–µ–≥–∏–æ–Ω', how='left')
                color_data = regional_data['–í–æ–∑—Ä–∞—Å—Ç'].fillna(regional_data['–í–æ–∑—Ä–∞—Å—Ç'].mean())
                color_label = '–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç'
            else:
                color_data = regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
                color_label = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤'
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: Scatter plot —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            # –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤
            np.random.seed(42)
            x_coords = np.random.uniform(0, 10, len(regional_data))
            y_coords = np.random.uniform(0, 10, len(regional_data))
            
            # –†–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª—É—á–∞–µ–≤
            max_cases = regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].max()
            sizes = (regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] / max_cases * 800) + 100
            
            scatter = ax1.scatter(x_coords, y_coords, 
                            s=sizes, 
                            c=color_data, 
                            cmap='viridis', alpha=0.7, edgecolors='black', linewidth=1)
            
            # –ü–æ–¥–ø–∏—Å–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
            for i, region in enumerate(regional_data['–†–µ–≥–∏–æ–Ω']):
                ax1.annotate(region, (x_coords[i], y_coords[i]), 
                        xytext=(5, 5), textcoords='offset points', fontsize=8,
                        bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.7))
            
            ax1.set_xlabel('–£—Å–ª–æ–≤–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞')
            ax1.set_ylabel('–£—Å–ª–æ–≤–Ω–∞—è —à–∏—Ä–æ—Ç–∞')
            ax1.set_title(f'–ö–∞—Ä—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏\n({period}, {disease_filter})\n–†–∞–∑–º–µ—Ä = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
            ax1.grid(True, alpha=0.3)
            
            # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞
            plt.colorbar(scatter, ax=ax1, label=color_label)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            ax2.hist(regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], bins=min(10, len(regional_data)), 
                    color='skyblue', alpha=0.7, edgecolor='black')
            ax2.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
            ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤')
            ax2.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏\n–ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º ({period})')
            ax2.grid(True, alpha=0.3)
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.map_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_text = f"""–ö–ê–†–¢–ê –ü–õ–û–¢–ù–û–°–¢–ò ({period})
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ: {disease_filter}
–†–µ–≥–∏–æ–Ω–æ–≤: {len(regional_data)}
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤: {regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum():,}

üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].max():,}
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].min():,}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].mean():,.1f}
‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].median():,.1f}

üéØ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {(regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].std() / regional_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].mean() * 100):,.1f}%"""
            
            self.map_stats_text.delete(1.0, tk.END)
            self.map_stats_text.insert(1.0, stats_text)
            
            self.update_status(f"–ö–∞—Ä—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è {period}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏: {str(e)}")

    def build_temporal_map(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ–¥–∞–º
            data = self.current_data.copy()
            disease_filter = self.map_disease.get()
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—é
            if disease_filter != '–í—Å–µ' and '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
                data = data[data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'] == disease_filter]
            
            data['–î–∞—Ç–∞'] = pd.to_datetime(data['–î–∞—Ç–∞'])
            data['–ì–æ–¥'] = data['–î–∞—Ç–∞'].dt.year
            data['–ú–µ—Å—è—Ü'] = data['–î–∞—Ç–∞'].dt.month
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≥–æ–¥-—Ä–µ–≥–∏–æ–Ω
            try:
                temporal_data = data.pivot_table(index='–ì–æ–¥', columns='–†–µ–≥–∏–æ–Ω', 
                                            values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', aggfunc='sum', fill_value=0)
                
                if len(temporal_data.index) > 0 and len(temporal_data.columns) > 0:
                    # –ë–µ—Ä–µ–º —Ç–æ–ø-12 —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    top_regions = temporal_data.sum(axis=0).sort_values(ascending=False).head(12).index
                    temporal_subset = temporal_data[top_regions]
                    
                    im1 = ax1.imshow(temporal_subset.values, cmap='YlOrRd', aspect='auto')
                    ax1.set_xticks(range(len(temporal_subset.columns)))
                    ax1.set_yticks(range(len(temporal_subset.index)))
                    ax1.set_xticklabels(temporal_subset.columns, rotation=45, ha='right')
                    ax1.set_yticklabels(temporal_subset.index)
                    ax1.set_xlabel('–†–µ–≥–∏–æ–Ω (—Ç–æ–ø-12)')
                    ax1.set_ylabel('–ì–æ–¥')
                    ax1.set_title(f'–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º\n({disease_filter})')
                    
                    plt.colorbar(im1, ax=ax1, label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —è—á–µ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    for i in range(len(temporal_subset.index)):
                        for j in range(len(temporal_subset.columns)):
                            value = temporal_subset.iloc[i, j]
                            if value > 0:
                                text_color = 'white' if value > temporal_subset.values.max() * 0.5 else 'black'
                                ax1.text(j, i, f'{int(value)}', ha='center', va='center', 
                                        color=text_color, fontsize=8, fontweight='bold')
                else:
                    ax1.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', transform=ax1.transAxes)
                    ax1.set_title('–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)')
            except Exception as e:
                ax1.text(0.5, 0.5, f'–û—à–∏–±–∫–∞: {str(e)[:50]}...', ha='center', va='center', transform=ax1.transAxes)
                ax1.set_title('–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏')
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –º–µ—Å—è—Ü-–≥–æ–¥
            try:
                monthly_data = data.pivot_table(index='–ú–µ—Å—è—Ü', columns='–ì–æ–¥', 
                                              values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', aggfunc='sum', fill_value=0)
                
                if len(monthly_data.index) > 0 and len(monthly_data.columns) > 0:
                    im2 = ax2.imshow(monthly_data.values, cmap='RdYlBu_r', aspect='auto')
                    ax2.set_xticks(range(len(monthly_data.columns)))
                    ax2.set_yticks(range(len(monthly_data.index)))
                    ax2.set_xticklabels(monthly_data.columns)
                    ax2.set_yticklabels([f'–ú–µ—Å.{m}' for m in monthly_data.index])
                    ax2.set_xlabel('–ì–æ–¥')
                    ax2.set_ylabel('–ú–µ—Å—è—Ü')
                    ax2.set_title(f'–°–µ–∑–æ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º\n({disease_filter})')
                    
                    plt.colorbar(im2, ax=ax2, label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —è—á–µ–π–∫–∏
                    for i in range(len(monthly_data.index)):
                        for j in range(len(monthly_data.columns)):
                            value = monthly_data.iloc[i, j]
                            if value > 0:
                                text_color = 'white' if value > monthly_data.values.max() * 0.5 else 'black'
                                ax2.text(j, i, f'{int(value)}', ha='center', va='center', 
                                        color=text_color, fontsize=8, fontweight='bold')
                else:
                    ax2.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', transform=ax2.transAxes)
                    ax2.set_title('–°–µ–∑–æ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)')
            except Exception as e:
                ax2.text(0.5, 0.5, f'–û—à–∏–±–∫–∞: {str(e)[:50]}...', ha='center', va='center', transform=ax2.transAxes)
                ax2.set_title('–û—à–∏–±–∫–∞ —Å–µ–∑–æ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏')
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.map_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            years = sorted(data['–ì–æ–¥'].unique()) if '–ì–æ–¥' in data.columns else []
            total_records = len(data)
            
            stats_text = f"""–í–†–ï–ú–ï–ù–ù–ê–Ø –ö–ê–†–¢–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ: {disease_filter}
–ü–µ—Ä–∏–æ–¥: {min(years) if years else '–ù/–î'} - {max(years) if years else '–ù/–î'}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç: {len(years)}
–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}

üìà –î–∏–Ω–∞–º–∏–∫–∞:
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –≥–æ–¥: {total_records / len(years) if years else 0:,.0f}
‚Ä¢ –í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤: {data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum() if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' in data.columns else 0:,}

üóìÔ∏è –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –ú–µ—Å—è—Ü–µ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {data['–ú–µ—Å—è—Ü'].nunique() if '–ú–µ—Å—è—Ü' in data.columns else 0}
‚Ä¢ –†–µ–≥–∏–æ–Ω–æ–≤ –æ—Ö–≤–∞—á–µ–Ω–æ: {data['–†–µ–≥–∏–æ–Ω'].nunique() if '–†–µ–≥–∏–æ–Ω' in data.columns else 0}"""
            
            self.map_stats_text.delete(1.0, tk.END)
            self.map_stats_text.insert(1.0, stats_text)
            
            self.update_status(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è {disease_filter}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã: {str(e)}")

    def build_kz_cartogram(self):
        """–ö–∞—Ä—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é"""
        try:
            fig, ax = plt.subplots(figsize=(12, 8))

            data = self.current_data.copy()
            metric = self.map_metric.get()
            period = self.map_period.get()
            disease_filter = self.map_disease.get()

            if disease_filter != '–í—Å–µ' and '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
                data = data[data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'] == disease_filter]

            if period != '–í—Å–µ –≥–æ–¥—ã':
                data['–ì–æ–¥'] = pd.to_datetime(data['–î–∞—Ç–∞']).dt.year
                data = data[data['–ì–æ–¥'] == int(period)]

            if len(data) == 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                return

            if metric == '–¢–µ–º–ø —Ä–æ—Å—Ç–∞':
                data['–ì–æ–¥'] = pd.to_datetime(data['–î–∞—Ç–∞']).dt.year
                yearly = data.groupby(['–†–µ–≥–∏–æ–Ω', '–ì–æ–¥'])['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().unstack(fill_value=0)
                if yearly.shape[1] >= 2:
                    last_year = yearly.columns[-1]
                    prev_year = yearly.columns[-2]
                    values = ((yearly[last_year] - yearly[prev_year]) / yearly[prev_year].replace(0, 1) * 100)
                    color_label = '–¢–µ–º–ø —Ä–æ—Å—Ç–∞ (%)'
                else:
                    values = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
                    color_label = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤'
            elif metric == '–í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤':
                values = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
                color_label = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤'
            else:
                values = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].mean()
                color_label = metric

            with open('kazakhstan_regions.json', 'r', encoding='utf-8') as f:
                coords = json.load(f)['regions']

            lons = [coords[r]['lon'] for r in values.index if r in coords]
            lats = [coords[r]['lat'] for r in values.index if r in coords]
            vals = [values[r] for r in values.index if r in coords]

            sc = ax.scatter(lons, lats, c=vals, cmap='coolwarm', s=300, edgecolors='black')

            for region in values.index:
                if region in coords:
                    ax.text(coords[region]['lon'], coords[region]['lat'], region, ha='center', va='center', fontsize=8)

            plt.colorbar(sc, ax=ax, label=color_label)
            ax.set_title(f'{metric} –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ ({period})')
            ax.set_xlabel('–î–æ–ª–≥–æ—Ç–∞')
            ax.set_ylabel('–®–∏—Ä–æ—Ç–∞')

            for widget in self.map_plot_frame.winfo_children():
                widget.destroy()

            canvas = FigureCanvasTkAgg(fig, master=self.map_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

            self.map_stats_text.delete(1.0, tk.END)
            self.map_stats_text.insert(1.0, f'–†–µ–≥–∏–æ–Ω–æ–≤: {len(values)}\n–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {np.mean(vals):.1f}')
            self.update_status('–ö–∞—Ä—Ç–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞')

        except Exception as e:
            messagebox.showerror('–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞: {str(e)}')
            
    def perform_analysis(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
            return
            
        analysis_type = self.analysis_type.get()
        
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for widget in self.analysis_plot_frame.winfo_children():
                widget.destroy()
            self.analysis_canvas = None
            
            if analysis_type == "seasonality":
                self.analyze_seasonality()
            elif analysis_type == "regions":
                self.analyze_regions()
            elif analysis_type == "age_groups":
                self.analyze_age_groups()
            elif analysis_type == "correlation":
                self.analyze_correlation()
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    def save_analysis_plot(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            canvas_widget = getattr(self, 'analysis_canvas', None)
            if canvas_widget is None:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
                return
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[
                    ("PNG —Ñ–∞–π–ª—ã", "*.png"),
                    ("PDF —Ñ–∞–π–ª—ã", "*.pdf"),
                    ("SVG —Ñ–∞–π–ª—ã", "*.svg"),
                    ("JPEG —Ñ–∞–π–ª—ã", "*.jpg")
                ],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"
            )
            
            if filename:
                canvas_widget.figure.savefig(filename, dpi=300, bbox_inches='tight')
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(filename)}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

    def quick_analysis(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
            return
            
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞
        self.notebook.select(1)
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.analyze_seasonality()
        
    def quick_forecast(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
            return
            
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        self.notebook.select(2)
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        self.build_forecast()
        
    def generate_report(self):
        """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
            return
            
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç—á–µ—Ç–æ–≤
        self.notebook.select(3)
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self.create_report()
        
    def analyze_seasonality(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 8))

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.get_analysis_filtered_data()
            if data is None or len(data) == 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                return
            data['–î–∞—Ç–∞'] = pd.to_datetime(data['–î–∞—Ç–∞'])
            data['–ú–µ—Å—è—Ü'] = data['–î–∞—Ç–∞'].dt.month
            data['–ì–æ–¥'] = data['–î–∞—Ç–∞'].dt.year
            data['–°–µ–∑–æ–Ω'] = data['–ú–µ—Å—è—Ü'].map({
                12: '–ó–∏–º–∞', 1: '–ó–∏–º–∞', 2: '–ó–∏–º–∞',
                3: '–í–µ—Å–Ω–∞', 4: '–í–µ—Å–Ω–∞', 5: '–í–µ—Å–Ω–∞',
                6: '–õ–µ—Ç–æ', 7: '–õ–µ—Ç–æ', 8: '–õ–µ—Ç–æ',
                9: '–û—Å–µ–Ω—å', 10: '–û—Å–µ–Ω—å', 11: '–û—Å–µ–Ω—å'
            })
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –û–±—â–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_data = data.groupby('–ú–µ—Å—è—Ü')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
            ax1.plot(monthly_data.index, monthly_data.values, marker='o', linewidth=3, markersize=8, color='#2E86AB')
            ax1.fill_between(monthly_data.index, monthly_data.values, alpha=0.3, color='#2E86AB')
            ax1.set_xlabel('–ú–µ—Å—è—Ü')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
            ax1.set_title('–û–±—â–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏', fontsize=14, fontweight='bold')
            ax1.grid(True, alpha=0.3)
            ax1.set_xticks(range(1, 13))
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º (—Ç–æ–ø-5)
            if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
                diseases = data.groupby('–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False).head(5).index
                colors = plt.cm.Set1(np.linspace(0, 1, len(diseases)))
                
                for disease, color in zip(diseases, colors):
                    disease_data = data[data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'] == disease]
                    monthly_disease = disease_data.groupby('–ú–µ—Å—è—Ü')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
                    ax2.plot(monthly_disease.index, monthly_disease.values, 
                            marker='o', label=disease, linewidth=2, color=color)
                
                ax2.set_xlabel('–ú–µ—Å—è—Ü')
                ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
                ax2.set_title('–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π', fontsize=14, fontweight='bold')
                ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
                ax2.grid(True, alpha=0.3)
                ax2.set_xticks(range(1, 13))
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–∑–æ–Ω–∞–º
            seasonal_data = data.groupby('–°–µ–∑–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
            colors = ['lightblue', 'lightgreen', 'orange', 'lightcoral']
            wedges, texts, autotexts = ax3.pie(seasonal_data.values, labels=seasonal_data.index, 
                                              autopct='%1.1f%%', colors=colors, startangle=90)
            ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–∑–æ–Ω–∞–º', fontsize=14, fontweight='bold')
            
            # –£–ª—É—á—à–∞–µ–º –≤–∏–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontweight('bold')
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
            yearly_monthly = data.groupby(['–ì–æ–¥', '–ú–µ—Å—è—Ü'])['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().unstack(fill_value=0)
            
            if len(yearly_monthly.index) > 1:
                for year in yearly_monthly.index:
                    ax4.plot(range(1, 13), yearly_monthly.loc[year], marker='o', label=str(year), linewidth=2)
                ax4.set_xlabel('–ú–µ—Å—è—Ü')
                ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
                ax4.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≥–æ–¥–∞–º', fontsize=14, fontweight='bold')
                ax4.legend()
                ax4.grid(True, alpha=0.3)
                ax4.set_xticks(range(1, 13))
            else:
                ax4.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –≥–æ–¥–∞–º', 
                        ha='center', va='center', transform=ax4.transAxes, fontsize=12)
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            canvas = FigureCanvasTkAgg(fig, master=self.analysis_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            self.analysis_canvas = canvas
            self.analysis_canvas = canvas
            self.analysis_canvas = canvas
            self.analysis_canvas = canvas
            
            self.update_status("–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {str(e)}")

    def analyze_regions(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 8))

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.get_analysis_filtered_data()
            if data is None or len(data) == 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                return
            regional_data = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False)
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            colors = plt.cm.viridis(np.linspace(0, 1, len(regional_data)))
            bars = ax1.bar(range(len(regional_data)), regional_data.values, color=colors)
            ax1.set_xticks(range(len(regional_data)))
            ax1.set_xticklabels(regional_data.index, rotation=45, ha='right')
            ax1.set_xlabel('–†–µ–≥–∏–æ–Ω')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
            ax1.set_title('–ó–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º', fontsize=14, fontweight='bold')
            ax1.grid(True, axis='y', alpha=0.3)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars, regional_data.values):
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + value*0.01,
                        f'{value:,.0f}', ha='center', va='bottom', fontsize=8)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ç–æ–ø-—Ä–µ–≥–∏–æ–Ω–æ–≤
            top_regions = regional_data.head(8)
            others = regional_data[8:].sum()
            if others > 0:
                plot_data = pd.concat([top_regions, pd.Series([others], index=['–î—Ä—É–≥–∏–µ'])])
            else:
                plot_data = top_regions
                
            ax2.pie(plot_data.values, labels=plot_data.index, autopct='%1.1f%%', startangle=90)
            ax2.set_title('–î–æ–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –æ–±—â–µ–π –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏', fontsize=14, fontweight='bold')
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω-–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ
            if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
                try:
                    heatmap_data = data.pivot_table(index='–†–µ–≥–∏–æ–Ω', columns='–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ', 
                                                  values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', aggfunc='sum', fill_value=0)
                    
                    # –ë–µ—Ä–µ–º —Ç–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ —Ç–æ–ø-5 –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    top_regions_heat = heatmap_data.sum(axis=1).sort_values(ascending=False).head(10).index
                    top_diseases_heat = heatmap_data.sum(axis=0).sort_values(ascending=False).head(5).index
                    
                    heatmap_subset = heatmap_data.loc[top_regions_heat, top_diseases_heat]
                    
                    im = ax3.imshow(heatmap_subset.values, cmap='YlOrRd', aspect='auto')
                    ax3.set_xticks(range(len(heatmap_subset.columns)))
                    ax3.set_yticks(range(len(heatmap_subset.index)))
                    ax3.set_xticklabels(heatmap_subset.columns, rotation=45, ha='right')
                    ax3.set_yticklabels(heatmap_subset.index)
                    ax3.set_title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –¢–æ–ø —Ä–µ–≥–∏–æ–Ω—ã √ó –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è', fontsize=14, fontweight='bold')
                    
                    # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞
                    plt.colorbar(im, ax=ax3, label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
                    
                except Exception as e:
                    ax3.text(0.5, 0.5, f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è\n—Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã:\n{str(e)}', 
                            ha='center', va='center', transform=ax3.transAxes)
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            regional_stats = data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].agg(['sum', 'mean', 'std']).fillna(0)
            regional_stats = regional_stats.sort_values('sum', ascending=True).tail(10)  # –¢–æ–ø-10
            
            ax4.barh(range(len(regional_stats)), regional_stats['sum'], color='lightcoral', alpha=0.7, label='–í—Å–µ–≥–æ')
            ax4.set_yticks(range(len(regional_stats)))
            ax4.set_yticklabels(regional_stats.index)
            ax4.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
            ax4.set_title('–¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)', fontsize=14, fontweight='bold')
            ax4.grid(True, axis='x', alpha=0.3)
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.analysis_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            self.update_status("–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º: {str(e)}")

    def analyze_age_groups(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"""
        try:
            if '–í–æ–∑—Ä–∞—Å—Ç' not in self.current_data.columns:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–í–æ–∑—Ä–∞—Å—Ç'")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 8))

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.get_analysis_filtered_data()
            if data is None or len(data) == 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                return
            data = data.dropna(subset=['–í–æ–∑—Ä–∞—Å—Ç'])  # –£–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–∞
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
            data['–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'] = pd.cut(data['–í–æ–∑—Ä–∞—Å—Ç'], 
                                              bins=[0, 14, 30, 45, 60, 100],
                                              labels=['0-14', '15-30', '31-45', '46-60', '60+'])
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
            age_data = data.groupby('–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']
            bars = ax1.bar(age_data.index, age_data.values, color=colors[:len(age_data)])
            ax1.set_xlabel('–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
            ax1.set_title('–ó–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º', fontsize=14, fontweight='bold')
            ax1.grid(True, axis='y', alpha=0.3)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, value in zip(bars, age_data.values):
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + value*0.01,
                        f'{value:,.0f}', ha='center', va='bottom', fontsize=10)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º
            if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
                disease_age = data.groupby('–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')['–í–æ–∑—Ä–∞—Å—Ç'].mean().sort_values()
                ax2.barh(disease_age.index, disease_age.values, color='lightgreen')
                ax2.set_xlabel('–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
                ax2.set_ylabel('–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')
                ax2.set_title('–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º', fontsize=14, fontweight='bold')
                ax2.grid(True, axis='x', alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
            ax3.hist(data['–í–æ–∑—Ä–∞—Å—Ç'], bins=20, color='skyblue', alpha=0.7, edgecolor='black')
            ax3.set_xlabel('–í–æ–∑—Ä–∞—Å—Ç')
            ax3.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤', fontsize=14, fontweight='bold')
            ax3.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ –ø–æ–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if '–ü–æ–ª' in data.columns:
                try:
                    gender_age = data.groupby(['–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞', '–ü–æ–ª'])['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().unstack(fill_value=0)
                    gender_age.plot(kind='bar', ax=ax4, color=['lightblue', 'lightpink'])
                    ax4.set_xlabel('–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')
                    ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
                    ax4.set_title('–ó–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –ø–æ–ª—É', fontsize=14, fontweight='bold')
                    ax4.legend(title='–ü–æ–ª')
                    ax4.tick_params(axis='x', rotation=45)
                    ax4.grid(True, axis='y', alpha=0.3)
                except:
                    ax4.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–ø–æ –ø–æ–ª—É', 
                            ha='center', va='center', transform=ax4.transAxes)
            else:
                # Box plot –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º
                if '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ' in data.columns:
                    diseases_for_box = data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].value_counts().head(5).index
                    box_data = [data[data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'] == disease]['–í–æ–∑—Ä–∞—Å—Ç'].values 
                               for disease in diseases_for_box]
                    ax4.boxplot(box_data, labels=diseases_for_box)
                    ax4.set_xlabel('–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')
                    ax4.set_ylabel('–í–æ–∑—Ä–∞—Å—Ç')
                    ax4.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º', fontsize=14, fontweight='bold')
                    ax4.tick_params(axis='x', rotation=45)
                    ax4.grid(True, alpha=0.3)
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.analysis_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            self.update_status("–ê–Ω–∞–ª–∏–∑ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º: {str(e)}")

    def analyze_correlation(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 8))

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
            data = self.get_analysis_filtered_data()
            if data is None or len(data) == 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            numeric_data = data.select_dtypes(include=[np.number])
            
            if len(numeric_data.columns) < 2:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
                return
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
            corr_matrix = numeric_data.corr()
            
            im = ax1.imshow(corr_matrix.values, cmap='RdBu_r', vmin=-1, vmax=1, aspect='auto')
            ax1.set_xticks(range(len(corr_matrix.columns)))
            ax1.set_yticks(range(len(corr_matrix.index)))
            ax1.set_xticklabels(corr_matrix.columns, rotation=45, ha='right')
            ax1.set_yticklabels(corr_matrix.index)
            ax1.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞', fontsize=14, fontweight='bold')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
            for i in range(len(corr_matrix.index)):
                for j in range(len(corr_matrix.columns)):
                    text = ax1.text(j, i, f'{corr_matrix.iloc[i, j]:.2f}',
                                   ha="center", va="center", 
                                   color="black" if abs(corr_matrix.iloc[i, j]) < 0.5 else "white")
            
            plt.colorbar(im, ax=ax1, label='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: Scatter plot —Å–∞–º—ã—Ö –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if len(numeric_data.columns) >= 2:
                # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—É —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π (–∏—Å–∫–ª—é—á–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å)
                corr_abs = np.abs(corr_matrix.values)
                np.fill_diagonal(corr_abs, 0)
                max_corr_idx = np.unravel_index(np.argmax(corr_abs), corr_abs.shape)
                
                var1, var2 = corr_matrix.columns[max_corr_idx[1]], corr_matrix.index[max_corr_idx[0]]
                
                ax2.scatter(numeric_data[var1], numeric_data[var2], alpha=0.6, color='steelblue')
                ax2.set_xlabel(var1)
                ax2.set_ylabel(var2)
                ax2.set_title(f'Scatter plot: {var1} vs {var2}\n–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {corr_matrix.loc[var2, var1]:.3f}', 
                             fontsize=12, fontweight='bold')
                ax2.grid(True, alpha=0.3)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
                z = np.polyfit(numeric_data[var1].dropna(), numeric_data[var2].dropna(), 1)
                p = np.poly1d(z)
                ax2.plot(numeric_data[var1], p(numeric_data[var1]), "r--", alpha=0.8)
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            corr_values = corr_matrix.values[np.triu_indices_from(corr_matrix.values, k=1)]
            ax3.hist(corr_values, bins=20, color='lightcoral', alpha=0.7, edgecolor='black')
            ax3.set_xlabel('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
            ax3.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏', fontsize=14, fontweight='bold')
            ax3.grid(True, alpha=0.3)
            ax3.axvline(x=0, color='black', linestyle='--', alpha=0.5)
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            if '–î–∞—Ç–∞' in data.columns:
                try:
                    data['–î–∞—Ç–∞_dt'] = pd.to_datetime(data['–î–∞—Ç–∞'])
                    data['–ú–µ—Å—è—Ü'] = data['–î–∞—Ç–∞_dt'].dt.month
                    
                    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
                    monthly_corr = []
                    months = []
                    
                    for month in range(1, 13):
                        month_data = data[data['–ú–µ—Å—è—Ü'] == month]
                        if len(month_data) > 5:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                            month_numeric = month_data.select_dtypes(include=[np.number])
                            if len(month_numeric.columns) >= 2:
                                corr = month_numeric.corr().iloc[0, 1] if len(month_numeric.columns) == 2 else month_numeric.corr().values[0, 1]
                                monthly_corr.append(corr)
                                months.append(month)
                    
                    if monthly_corr:
                        ax4.plot(months, monthly_corr, marker='o', linewidth=2, markersize=8, color='green')
                        ax4.set_xlabel('–ú–µ—Å—è—Ü')
                        ax4.set_ylabel('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è')
                        ax4.set_title('–°–µ–∑–æ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π', fontsize=14, fontweight='bold')
                        ax4.grid(True, alpha=0.3)
                        ax4.set_xticks(range(1, 13))
                    else:
                        ax4.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞', 
                                ha='center', va='center', transform=ax4.transAxes)
                except:
                    ax4.text(0.5, 0.5, '–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ\n–∞–Ω–∞–ª–∏–∑–∞', 
                            ha='center', va='center', transform=ax4.transAxes)
            else:
                ax4.text(0.5, 0.5, '–ö–æ–ª–æ–Ω–∫–∞ "–î–∞—Ç–∞"\n–Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 
                        ha='center', va='center', transform=ax4.transAxes)
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.analysis_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            self.update_status("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {str(e)}")
                    
    def build_forecast(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
            return
            
        model_type = self.model_var.get()
        periods = self.forecast_period.get()
        
        # –û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        for widget in self.forecast_plot_frame.winfo_children():
            widget.destroy()
            
        self.update_status(f"–°—Ç—Ä–æ–∏—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑ {model_type}...")
        self.root.update()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            if model_type == "XGBoost":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                if globals().get('XGBOOST_AVAILABLE', False):
                    self.forecast_xgboost()
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    messagebox.showinfo("XGBoost –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 
                                    "XGBoost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω.\n\n"
                                    "–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫:\n"
                                    f"‚Ä¢ XGBoost: {globals().get('XGBOOST_AVAILABLE', False)}\n"
                                    f"‚Ä¢ scikit-learn: {globals().get('SKLEARN_AVAILABLE', False)}\n"
                                    f"‚Ä¢ statsmodels: {globals().get('STATSMODELS_AVAILABLE', False)}\n\n"
                                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫.")
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SARIMA –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    self.model_var.set("SARIMA")
                    self.forecast_sarima()
                    
            elif model_type == "Random Forest":
                if globals().get('SKLEARN_AVAILABLE', False):
                    self.forecast_ml()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ SARIMA.")
                    self.model_var.set("SARIMA")
                    self.forecast_sarima()
                    
            elif model_type == "Linear Regression":
                if globals().get('SKLEARN_AVAILABLE', False):
                    self.forecast_linear_regression()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ SARIMA.")
                    self.model_var.set("SARIMA")
                    self.forecast_sarima()
            else:
                # SARIMA –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
                self.forecast_sarima()
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ {model_type}: {str(e)}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import traceback
            print(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {model_type}:")
            traceback.print_exc()
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - SARIMA
            try:
                print("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SARIMA –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...")
                self.model_var.set("SARIMA")
                self.forecast_sarima()
            except Exception as fallback_error:
                messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑:\n{str(fallback_error)}")
                print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∞—Å–Ω–æ–º SARIMA: {fallback_error}")
                
            self.update_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")

    def forecast_sarima(self):
        """–ù–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ SARIMA"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.current_data.copy()
            region_filter = getattr(self, 'forecast_region_var', None)
            if region_filter and region_filter != '–í—Å–µ' and '–†–µ–≥–∏–æ–Ω' in data.columns:
                data = data[data['–†–µ–≥–∏–æ–Ω'] == region_filter]
            data['–î–∞—Ç–∞'] = pd.to_datetime(data['–î–∞—Ç–∞'], errors='coerce')
            data = data.dropna(subset=['–î–∞—Ç–∞'])
            monthly_data = data.resample('MS', on='–î–∞—Ç–∞')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()

            if (monthly_data > 0).sum() < 24:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SARIMA (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 24 –º–µ—Å—è—Ü–∞)")
                return

            monthly_data = monthly_data[monthly_data > 0]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏
            def check_stationarity(timeseries):
                """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞"""
                if STATSMODELS_AVAILABLE:
                    result = adfuller(timeseries)
                    return result[1] < 0.05  # p-value < 0.05 –æ–∑–Ω–∞—á–∞–µ—Ç —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å
                return True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ statsmodels –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–º—É –≤–∏–¥—É
            diff_data = monthly_data
            diff_order = 0
            
            if STATSMODELS_AVAILABLE:
                while not check_stationarity(diff_data.dropna()) and diff_order < 2:
                    diff_data = diff_data.diff()
                    diff_order += 1
            
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ARIMA –±–µ–∑ statsmodels
            if not STATSMODELS_AVAILABLE:
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é
                periods = self.forecast_period.get()
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥
                X = np.arange(len(monthly_data))
                trend_coef = np.polyfit(X, monthly_data.values, 1)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É (12-–º–µ—Å—è—á–Ω–∞—è)
                seasonal_component = np.zeros(12)
                for i in range(12):
                    month_values = [monthly_data.iloc[j] for j in range(i, len(monthly_data), 12)]
                    if month_values:
                        seasonal_component[i] = np.mean(month_values) - monthly_data.mean()
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                last_value = monthly_data.iloc[-1]
                last_date = monthly_data.index[-1]
                forecast_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), 
                                            periods=periods, freq='M')
                forecast_values = []
                
                for i in range(periods):
                    # –¢—Ä–µ–Ω–¥
                    trend_value = trend_coef[0] * (len(monthly_data) + i) + trend_coef[1]
                    
                    # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
                    month_idx = (last_date.month + i) % 12
                    seasonal_value = seasonal_component[month_idx]
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                    forecast_val = max(0, trend_value + seasonal_value)
                    forecast_values.append(forecast_val)
                
                method_name = "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è SARIMA (—Ç—Ä–µ–Ω–¥ + —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)"
                
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é ARIMA –∏–∑ statsmodels
                try:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ARIMA
                    best_aic = float('inf')
                    best_model = None
                    best_params = None
                    
                    # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    for p in range(0, 3):
                        for d in range(0, 2):
                            for q in range(0, 3):
                                try:
                                    model = ARIMA(monthly_data, order=(p, d, q))
                                    fitted_model = model.fit()
                                    if fitted_model.aic < best_aic:
                                        best_aic = fitted_model.aic
                                        best_model = fitted_model
                                        best_params = (p, d, q)
                                except:
                                    continue
                    
                    if best_model is None:
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ARIMA")
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    periods = self.forecast_period.get()
                    forecast_result = best_model.forecast(steps=periods)
                    forecast_values = np.maximum(forecast_result, 0)  # –ù–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    
                    last_date = monthly_data.index[-1]
                    forecast_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), 
                                                periods=periods, freq='M')
                    
                    method_name = f"ARIMA{best_params} (AIC: {best_aic:.1f})"
                    
                except Exception as e:
                    # Fallback –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                    print(f"–û—à–∏–±–∫–∞ ARIMA: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å")
                    return self.forecast_sarima()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å STATSMODELS_AVAILABLE = False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ–≥–Ω–æ–∑
            ax1.plot(monthly_data.index, monthly_data.values, 
                    label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', marker='o', linewidth=2, color='blue')
            ax1.plot(forecast_dates, forecast_values, 
                    label=f'–ü—Ä–æ–≥–Ω–æ–∑ ({method_name})', color='red', marker='s', linestyle='--', linewidth=2)
            
            ax1.set_xlabel('–î–∞—Ç–∞')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
            ax1.set_title(f'SARIMA –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤\n{method_name}', fontsize=14)
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
            if STATSMODELS_AVAILABLE and len(monthly_data) >= 24:
                try:
                    decomposition = seasonal_decompose(monthly_data, model='additive', period=12)
                    
                    ax2.plot(monthly_data.index, decomposition.trend.dropna(), 
                            label='–¢—Ä–µ–Ω–¥', linewidth=2, color='green')
                    ax2.plot(monthly_data.index, decomposition.seasonal, 
                            label='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', linewidth=1, alpha=0.7, color='orange')
                    ax2.set_xlabel('–î–∞—Ç–∞')
                    ax2.set_ylabel('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã')
                    ax2.set_title('–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞', fontsize=14)
                    ax2.legend()
                    ax2.grid(True, alpha=0.3)
                except:
                    ax2.plot(monthly_data.index, monthly_data.values, color='blue')
                    ax2.set_title('–ò—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥')
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏
                if len(monthly_data) >= 12:
                    rolling_mean = monthly_data.rolling(window=12).mean()
                    residuals = monthly_data - rolling_mean
                    ax2.plot(monthly_data.index, residuals, color='gray', alpha=0.7)
                    ax2.axhline(y=0, color='red', linestyle='--')
                    ax2.set_title('–û—Å—Ç–∞—Ç–∫–∏ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ)')
                    ax2.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏')
                else:
                    ax2.plot(monthly_data.index, monthly_data.values, color='blue')
                    ax2.set_title('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.forecast_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.forecast_results = {
                'dates': forecast_dates,
                'values': forecast_values,
                'model': 'SARIMA',
                'method_details': method_name
            }
            
            self.update_status(f"SARIMA –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ SARIMA –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")

    def forecast_xgboost(self):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º XGBoost (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π)"""
        if not XGBOOST_AVAILABLE:
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ XGBoost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                            "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n"
                            "pip install xgboost")
            return
            
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.current_data.copy()
            region_filter = getattr(self, 'forecast_region_var', None)
            if region_filter and region_filter != '–í—Å–µ' and '–†–µ–≥–∏–æ–Ω' in data.columns:
                data = data[data['–†–µ–≥–∏–æ–Ω'] == region_filter]
            data['–î–∞—Ç–∞'] = pd.to_datetime(data['–î–∞—Ç–∞'], errors='coerce')
            data = data.dropna(subset=['–î–∞—Ç–∞'])

            if len(data) == 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return

            monthly_data = data.resample('MS', on='–î–∞—Ç–∞')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()

            if (monthly_data > 0).sum() < 12:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è XGBoost –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                return

            monthly_data = monthly_data.reset_index()
            monthly_data['–ú–µ—Å—è—Ü'] = monthly_data['–î–∞—Ç–∞'].dt.month
            monthly_data['–ì–æ–¥'] = monthly_data['–î–∞—Ç–∞'].dt.year
            monthly_data['–ü–µ—Ä–∏–æ–¥'] = monthly_data['–ì–æ–¥'] * 12 + monthly_data['–ú–µ—Å—è—Ü']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            monthly_data['–õ–∞–≥_1'] = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].shift(1)
            monthly_data['–õ–∞–≥_2'] = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].shift(2)
            monthly_data['–õ–∞–≥_3'] = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].shift(3)
            
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            monthly_data['–ú–ê_3'] = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].rolling(window=3, min_periods=1).mean()
            monthly_data['–ú–ê_6'] = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].rolling(window=6, min_periods=1).mean()
            
            # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            monthly_data['–°–µ–∑–æ–Ω_sin'] = np.sin(2 * np.pi * monthly_data['–ú–µ—Å—è—Ü'] / 12)
            monthly_data['–°–µ–∑–æ–Ω_cos'] = np.cos(2 * np.pi * monthly_data['–ú–µ—Å—è—Ü'] / 12)
            
            # –¢—Ä–µ–Ω–¥
            monthly_data['–¢—Ä–µ–Ω–¥'] = range(len(monthly_data))
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN
            monthly_data = monthly_data.dropna()
            
            if len(monthly_data) < 8:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è XGBoost –º–æ–¥–µ–ª–∏")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            feature_columns = ['–ü–µ—Ä–∏–æ–¥', '–ú–µ—Å—è—Ü', '–¢—Ä–µ–Ω–¥', '–õ–∞–≥_1', '–õ–∞–≥_2', '–õ–∞–≥_3', 
                            '–ú–ê_3', '–ú–ê_6', '–°–µ–∑–æ–Ω_sin', '–°–µ–∑–æ–Ω_cos']
            
            X = monthly_data[feature_columns].values
            y = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].values
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
            test_size = min(0.2, 3 / len(X))
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42, shuffle=False)
            
            # –û–±—É—á–µ–Ω–∏–µ XGBoost –º–æ–¥–µ–ª–∏
            xgb_model = xgb.XGBRegressor(
                n_estimators=100,
                max_depth=6,
                learning_rate=0.1,
                random_state=42,
                objective='reg:squarederror'
            )
            
            xgb_model.fit(X_train, y_train)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
            y_pred = xgb_model.predict(X_test)
            mae = mean_absolute_error(y_test, y_pred)
            r2 = r2_score(y_test, y_pred)
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            periods = self.forecast_period.get()
            forecast_values = []
            forecast_dates = []
            
            last_period = monthly_data['–ü–µ—Ä–∏–æ–¥'].iloc[-1]
            
            for i in range(periods):
                new_period = last_period + i + 1
                new_year = new_period // 12
                new_month = new_period % 12
                if new_month == 0:
                    new_month = 12
                    new_year -= 1
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                new_trend = len(monthly_data) + i
                
                # –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                if i == 0:
                    lag_1 = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1]
                    lag_2 = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-2] if len(monthly_data) > 1 else lag_1
                    lag_3 = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-3] if len(monthly_data) > 2 else lag_1
                    ma_3 = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-3:].mean() if len(monthly_data) > 2 else lag_1
                    ma_6 = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-6:].mean() if len(monthly_data) > 5 else lag_1
                else:
                    lag_1 = forecast_values[i-1] if i > 0 else monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1]
                    lag_2 = forecast_values[i-2] if i > 1 else monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1]
                    lag_3 = forecast_values[i-3] if i > 2 else monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1]
                    
                    recent_values = list(monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-3:]) + forecast_values[:i]
                    ma_3 = np.mean(recent_values[-3:])
                    ma_6 = np.mean(recent_values[-6:])
                
                new_features = [
                    new_period, new_month, new_trend, lag_1, lag_2, lag_3, ma_3, ma_6,
                    np.sin(2 * np.pi * new_month / 12), np.cos(2 * np.pi * new_month / 12)
                ]
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                X_new = np.array([new_features])
                forecast_value = max(0, xgb_model.predict(X_new)[0])
                forecast_values.append(forecast_value)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
                try:
                    forecast_date = pd.Timestamp(year=int(new_year), month=int(new_month), day=1)
                    forecast_dates.append(forecast_date)
                except (ValueError, OverflowError) as e:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –¥–∞—Ç—É + offset
                    last_known_date = pd.Timestamp(year=int(monthly_data['–ì–æ–¥'].iloc[-1]), 
                                                month=int(monthly_data['–ú–µ—Å—è—Ü'].iloc[-1]), day=1)
                    forecast_date = last_known_date + pd.DateOffset(months=i+1)
                    forecast_dates.append(forecast_date)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ò–†–û–í–ö–ò: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'Tahoma', 'sans-serif']
            plt.rcParams['axes.unicode_minus'] = False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ–≥–Ω–æ–∑ (–±–æ–ª–µ–µ —á–∏—Å—Ç—ã–π –¥–∏–∑–∞–π–Ω)
            try:
                historical_dates = []
                for _, row in monthly_data.iterrows():
                    try:
                        date = pd.Timestamp(year=int(row['–ì–æ–¥']), month=int(row['–ú–µ—Å—è—Ü']), day=1)
                        historical_dates.append(date)
                    except:
                        continue
                
                if len(historical_dates) == len(monthly_data):
                    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    ax1.plot(historical_dates, monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], 
                            label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', marker='o', linewidth=2.5, 
                            color='#2E86AB', markersize=6, alpha=0.8)
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    if forecast_dates:
                        ax1.plot(forecast_dates, forecast_values, 
                                label='–ü—Ä–æ–≥–Ω–æ–∑ XGBoost', color='#E74C3C', marker='s', 
                                linestyle='--', linewidth=3, markersize=7, alpha=0.9)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                    if historical_dates and forecast_dates:
                        ax1.axvline(x=historical_dates[-1], color='gray', linestyle=':', alpha=0.7, linewidth=2)
                        ax1.text(historical_dates[-1], ax1.get_ylim()[1]*0.9, ' –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å', 
                                rotation=90, verticalalignment='top', fontsize=10, color='gray')
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç: {e}")
                # Fallback –∫ –∏–Ω–¥–µ–∫—Å–∞–º
                ax1.plot(range(len(monthly_data)), monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], 
                        label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', marker='o', linewidth=2.5, color='#2E86AB')
                if forecast_values:
                    forecast_start = len(monthly_data)
                    ax1.plot(range(forecast_start, forecast_start + len(forecast_values)), forecast_values, 
                            label='–ü—Ä–æ–≥–Ω–æ–∑ XGBoost', color='#E74C3C', marker='s', linestyle='--', linewidth=3)
            
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            ax1.set_xlabel('–ü–µ—Ä–∏–æ–¥', fontsize=12, fontweight='bold')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤', fontsize=12, fontweight='bold')
            ax1.set_title(f'XGBoost: –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤\n'
                        f'–¢–æ—á–Ω–æ—Å—Ç—å: R¬≤ = {r2:.3f} | –û—à–∏–±–∫–∞: MAE = {mae:.1f}', 
                        fontsize=14, fontweight='bold', pad=20)
            
            ax1.legend(loc='upper left', frameon=True, fancybox=True, shadow=True, fontsize=11)
            ax1.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
            ax1.set_facecolor('#FAFAFA')
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
            if len(X_test) > 0 and len(y_test) > 0:
                # –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ - –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                ax2.scatter(y_test, y_pred, alpha=0.8, color='#3498DB', s=80, edgecolors='white', linewidth=1.5)
                
                # –ò–¥–µ–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                min_val = min(min(y_test), min(y_pred)) * 0.95
                max_val = max(max(y_test), max(y_pred)) * 1.05
                ax2.plot([min_val, max_val], [min_val, max_val], 'r-', linewidth=3, alpha=0.8, label='–ò–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                stats_text = f'–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:\n' \
                            f'R¬≤ = {r2:.3f}\n' \
                            f'MAE = {mae:.1f}\n' \
                            f'–¢–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫: {len(y_test)}'
                
                ax2.text(0.98, 0.02, stats_text, transform=ax2.transAxes, fontsize=11,
                        verticalalignment='bottom', horizontalalignment='right',
                        bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.9, edgecolor='gray'))
                
                ax2.set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12, fontweight='bold')
                ax2.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12, fontweight='bold')
                ax2.set_title('–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: –§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑', fontsize=14, fontweight='bold', pad=15)
                ax2.legend(loc='upper left', frameon=True, fancybox=True, shadow=True)
                ax2.grid(True, alpha=0.3)
                ax2.set_facecolor('#FAFAFA')
                
            else:
                # –ï—Å–ª–∏ –º–∞–ª–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω—É—é)
                feature_importance = xgb_model.feature_importances_
                feature_names = ['–ü–µ—Ä–∏–æ–¥', '–ú–µ—Å—è—Ü', '–¢—Ä–µ–Ω–¥', '–õ–∞–≥-1', '–õ–∞–≥-2', '–õ–∞–≥-3', 
                                '–°–ú–ê-3', '–°–ú–ê-6', '–°–µ–∑–æ–Ω-sin', '–°–µ–∑–æ–Ω-cos']
                
                # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-6 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                importance_data = list(zip(feature_names, feature_importance))
                importance_data.sort(key=lambda x: x[1], reverse=True)
                top_features = importance_data[:6]
                
                names, importances = zip(*top_features)
                
                # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
                colors = ['#E74C3C', '#3498DB', '#2ECC71', '#F39C12', '#9B59B6', '#1ABC9C']
                
                bars = ax2.barh(names, importances, color=colors, alpha=0.8, edgecolor='white', linewidth=1)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
                for i, (bar, importance) in enumerate(zip(bars, importances)):
                    percentage = importance * 100
                    ax2.text(bar.get_width() + max(importances)*0.01, bar.get_y() + bar.get_height()/2, 
                            f'{percentage:.1f}%', ha='left', va='center', fontsize=10, fontweight='bold')
                
                ax2.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞', fontsize=12, fontweight='bold')
                ax2.set_title('–¢–æ–ø-6 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–¥–µ–ª–∏', fontsize=14, fontweight='bold', pad=15)
                ax2.grid(True, axis='x', alpha=0.3)
                ax2.set_facecolor('#FAFAFA')
                ax2.set_xlim(0, max(importances) * 1.15)
            
            # –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞
            plt.tight_layout(pad=3.0)
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.forecast_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.forecast_results = {
                'dates': forecast_dates,
                'values': forecast_values,
                'model': 'XGBoost',
                'mae': mae,
                'r2': r2,
                'feature_importance': dict(zip(['–ü–µ—Ä–∏–æ–¥', '–ú–µ—Å—è—Ü', '–¢—Ä–µ–Ω–¥', '–õ–∞–≥-1', '–õ–∞–≥-2', '–õ–∞–≥-3', 
                                                '–°–ú–ê-3', '–°–ú–ê-6', '–°–µ–∑–æ–Ω-sin', '–°–µ–∑–æ–Ω-cos'], 
                                            xgb_model.feature_importances_))
            }
            
            self.update_status(f"XGBoost –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤ (MAE: {mae:.1f}, R¬≤: {r2:.3f})")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ XGBoost –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
            import traceback
            print("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ XGBoost:")
            traceback.print_exc()

    def forecast_linear_regression(self):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if not SKLEARN_AVAILABLE:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return
            
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.current_data.copy()
            region_filter = getattr(self, 'forecast_region_var', None)
            if region_filter and region_filter != '–í—Å–µ' and '–†–µ–≥–∏–æ–Ω' in data.columns:
                data = data[data['–†–µ–≥–∏–æ–Ω'] == region_filter]
            data['–î–∞—Ç–∞'] = pd.to_datetime(data['–î–∞—Ç–∞'], errors='coerce')
            data = data.dropna(subset=['–î–∞—Ç–∞'])
            monthly_data = data.resample('MS', on='–î–∞—Ç–∞')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()

            if (monthly_data > 0).sum() < 6:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
                return

            monthly_data = monthly_data[monthly_data > 0]
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç SARIMA)
            X = np.arange(len(monthly_data)).reshape(-1, 1)
            y = monthly_data.values
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            months = np.array([date.month for date in monthly_data.index])
            month_sin = np.sin(2 * np.pi * months / 12).reshape(-1, 1)
            month_cos = np.cos(2 * np.pi * months / 12).reshape(-1, 1)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            X_extended = np.hstack([X, month_sin, month_cos, X**2])  # –¢—Ä–µ–Ω–¥ + —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å + –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
            test_size = min(0.3, 4 / len(X_extended))
            X_train, X_test, y_train, y_test = train_test_split(X_extended, y, test_size=test_size, random_state=42)
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            model = LinearRegression()
            model.fit(X_train, y_train)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            y_pred_test = model.predict(X_test)
            mae = mean_absolute_error(y_test, y_pred_test)
            r2 = r2_score(y_test, y_pred_test)
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            periods = self.forecast_period.get()
            X_future = np.arange(len(monthly_data), len(monthly_data) + periods).reshape(-1, 1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            future_months = []
            last_date = monthly_data.index[-1]
            for i in range(periods):
                future_date = last_date + pd.DateOffset(months=i+1)
                future_months.append(future_date.month)
            
            future_months = np.array(future_months)
            future_month_sin = np.sin(2 * np.pi * future_months / 12).reshape(-1, 1)
            future_month_cos = np.cos(2 * np.pi * future_months / 12).reshape(-1, 1)
            
            X_future_extended = np.hstack([X_future, future_month_sin, future_month_cos, X_future**2])
            forecast_values = model.predict(X_future_extended)
            forecast_values = np.maximum(forecast_values, 0)  # –ù–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            
            # –î–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), 
                                        periods=periods, freq='M')
            
            # –ì—Ä–∞—Ñ–∏–∫
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ–≥–Ω–æ–∑
            ax1.plot(monthly_data.index, monthly_data.values, 
                label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', marker='o', linewidth=2, color='blue')
            
            # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            y_fitted = model.predict(X_extended)
            ax1.plot(monthly_data.index, y_fitted, 
                label='–õ–∏–Ω–µ–π–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è', color='green', linestyle=':', linewidth=2, alpha=0.8)
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            ax1.plot(forecast_dates, forecast_values, 
                label='–ü—Ä–æ–≥–Ω–æ–∑ (Linear Regression)', color='red', marker='s', linestyle='--', linewidth=2)
            
            ax1.set_xlabel('–î–∞—Ç–∞')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
            ax1.set_title(f'–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤\nMAE: {mae:.1f}, R¬≤: {r2:.3f}', fontsize=14)
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –û—Å—Ç–∞—Ç–∫–∏ –º–æ–¥–µ–ª–∏
            residuals = y - y_fitted
            ax2.scatter(range(len(residuals)), residuals, alpha=0.6, color='gray')
            ax2.axhline(y=0, color='red', linestyle='--', alpha=0.8)
            ax2.set_xlabel('–ò–Ω–¥–µ–∫—Å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è')
            ax2.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏')
            ax2.set_title('–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ –º–æ–¥–µ–ª–∏', fontsize=14)
            ax2.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
            residual_trend = np.polyfit(range(len(residuals)), residuals, 1)
            ax2.plot(range(len(residuals)), np.poly1d(residual_trend)(range(len(residuals))), 
                    color='orange', linestyle='--', alpha=0.7, label='–¢—Ä–µ–Ω–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤')
            ax2.legend()
            
            plt.tight_layout()
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.forecast_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.forecast_results = {
                'dates': forecast_dates,
                'values': forecast_values,
                'model': 'Linear Regression',
                'mae': mae,
                'r2': r2,
                'residuals_std': np.std(residuals)
            }
            
            self.update_status(f"–ü—Ä–æ–≥–Ω–æ–∑ Linear Regression –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤ (MAE: {mae:.1f}, R¬≤: {r2:.3f})")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ Linear Regression: {str(e)}")

    def forecast_ml(self):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        if not SKLEARN_AVAILABLE:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return
            
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = self.current_data.copy()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            try:
                data['–î–∞—Ç–∞'] = pd.to_datetime(data['–î–∞—Ç–∞'], errors='coerce')
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç: {str(e)}")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
            data = data.dropna(subset=['–î–∞—Ç–∞'])
            
            if len(data) == 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç")
                return
            
            data['–ú–µ—Å—è—Ü'] = data['–î–∞—Ç–∞'].dt.month
            data['–ì–æ–¥'] = data['–î–∞—Ç–∞'].dt.year
            data['–î–µ–Ω—å_–≥–æ–¥–∞'] = data['–î–∞—Ç–∞'].dt.dayofyear
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_data = data.groupby(['–ì–æ–¥', '–ú–µ—Å—è—Ü'])['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().reset_index()
            monthly_data['–ü–µ—Ä–∏–æ–¥'] = monthly_data['–ì–æ–¥'] * 12 + monthly_data['–ú–µ—Å—è—Ü']
            
            if len(monthly_data) < 12:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 12 –º–µ—Å—è—Ü–µ–≤)")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            monthly_data['–õ–∞–≥_1'] = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].shift(1)
            monthly_data['–õ–∞–≥_2'] = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].shift(2)
            monthly_data['–°–∫–æ–ª—å–∑—è—â–µ–µ_—Å—Ä–µ–¥–Ω–µ–µ'] = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].rolling(window=3, min_periods=1).mean()
            
            # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            monthly_data['–°–µ–∑–æ–Ω_sin'] = np.sin(2 * np.pi * monthly_data['–ú–µ—Å—è—Ü'] / 12)
            monthly_data['–°–µ–∑–æ–Ω_cos'] = np.cos(2 * np.pi * monthly_data['–ú–µ—Å—è—Ü'] / 12)
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ª–∞–≥–∞–º–∏)
            monthly_data = monthly_data.dropna()
            
            if len(monthly_data) < 8:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è ML –º–æ–¥–µ–ª–∏")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            feature_columns = ['–ü–µ—Ä–∏–æ–¥', '–ú–µ—Å—è—Ü', '–õ–∞–≥_1', '–õ–∞–≥_2', '–°–∫–æ–ª—å–∑—è—â–µ–µ_—Å—Ä–µ–¥–Ω–µ–µ', '–°–µ–∑–æ–Ω_sin', '–°–µ–∑–æ–Ω_cos']
            X = monthly_data[feature_columns].values
            y = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].values
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
            test_size = min(0.3, 3 / len(X))  # –ú–∏–Ω–∏–º—É–º 3 –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42, shuffle=False)
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Random Forest
            model = RandomForestRegressor(n_estimators=100, random_state=42, max_depth=10)
            model.fit(X_train, y_train)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
            y_pred = model.predict(X_test)
            mae = mean_absolute_error(y_test, y_pred)
            r2 = r2_score(y_test, y_pred)
            
            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            periods = self.forecast_period.get()
            forecast_values = []
            forecast_dates = []
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            last_values = monthly_data.tail(3)
            last_period = monthly_data['–ü–µ—Ä–∏–æ–¥'].iloc[-1]
            last_year = int(monthly_data['–ì–æ–¥'].iloc[-1])
            last_month = int(monthly_data['–ú–µ—Å—è—Ü'].iloc[-1])
            
            for i in range(periods):
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã
                new_period = last_period + i + 1
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
                months_to_add = i + 1
                new_year = last_year
                new_month = last_month + months_to_add
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –≥–æ–¥—ã
                while new_month > 12:
                    new_month -= 12
                    new_year += 1
                
                # –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                season_sin = np.sin(2 * np.pi * new_month / 12)
                season_cos = np.cos(2 * np.pi * new_month / 12)
                
                # –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                if i == 0:
                    lag_1 = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1]
                    lag_2 = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-2] if len(monthly_data) > 1 else lag_1
                    moving_avg = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-3:].mean() if len(monthly_data) > 2 else lag_1
                elif i == 1:
                    lag_1 = forecast_values[0]
                    lag_2 = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1]
                    moving_avg = np.mean([monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-2], monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1], forecast_values[0]])
                else:
                    lag_1 = forecast_values[i-1]
                    lag_2 = forecast_values[i-2] if i > 1 else monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1]
                    if i >= 2:
                        moving_avg = np.mean(forecast_values[i-3:i])
                    else:
                        moving_avg = np.mean([monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[-1]] + forecast_values[:i])
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                X_new = np.array([[new_period, new_month, lag_1, lag_2, moving_avg, season_sin, season_cos]])
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                forecast_value = max(0, model.predict(X_new)[0])
                forecast_values.append(forecast_value)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
                    if 1 <= new_month <= 12 and 1900 <= new_year <= 2100:
                        forecast_date = pd.Timestamp(year=new_year, month=new_month, day=1)
                    else:
                        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É + offset
                        last_date = pd.Timestamp(year=last_year, month=last_month, day=1)
                        forecast_date = last_date + pd.DateOffset(months=months_to_add)
                    
                    forecast_dates.append(forecast_date)
                    
                except (ValueError, OverflowError) as e:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π fallback
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è {new_year}-{new_month}: {e}")
                    last_date = pd.Timestamp(year=last_year, month=last_month, day=1)
                    forecast_date = last_date + pd.DateOffset(months=months_to_add)
                    forecast_dates.append(forecast_date)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'Tahoma', 'sans-serif']
            plt.rcParams['axes.unicode_minus'] = False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ–≥–Ω–æ–∑
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç
            try:
                historical_dates = []
                for _, row in monthly_data.iterrows():
                    try:
                        year = int(row['–ì–æ–¥'])
                        month = int(row['–ú–µ—Å—è—Ü'])
                        if 1 <= month <= 12 and 1900 <= year <= 2100:
                            date = pd.Timestamp(year=year, month=month, day=1)
                            historical_dates.append(date)
                        else:
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
                            continue
                    except (ValueError, TypeError):
                        continue
                
                if len(historical_dates) > 0:
                    # –ë–µ—Ä–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞—Ç
                    valid_values = monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[:len(historical_dates)]
                    
                    ax1.plot(historical_dates, valid_values, 
                            label='üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', marker='o', linewidth=2.5, 
                            color='#2E86AB', markersize=6, alpha=0.8)
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    if forecast_dates and forecast_values:
                        ax1.plot(forecast_dates, forecast_values, 
                                label='üöÄ –ü—Ä–æ–≥–Ω–æ–∑ Random Forest', color='#E74C3C', marker='s', 
                                linestyle='--', linewidth=3, markersize=7, alpha=0.9)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                        if historical_dates and forecast_dates:
                            ax1.axvline(x=historical_dates[-1], color='gray', linestyle=':', alpha=0.7, linewidth=2)
                            ax1.text(historical_dates[-1], ax1.get_ylim()[1]*0.9, ' –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å', 
                                    rotation=90, verticalalignment='top', fontsize=10, color='gray')
                else:
                    # Fallback –∫ —á–∏—Å–ª–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–∞–º
                    ax1.plot(range(len(monthly_data)), monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], 
                            label='üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', marker='o', linewidth=2.5, color='#2E86AB')
                    if forecast_values:
                        forecast_start = len(monthly_data)
                        ax1.plot(range(forecast_start, forecast_start + len(forecast_values)), forecast_values, 
                                label='üöÄ –ü—Ä–æ–≥–Ω–æ–∑ Random Forest', color='#E74C3C', marker='s', linestyle='--', linewidth=3)
            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∞—Ç: {e}")
                # –ü—Ä–æ—Å—Ç–æ–π fallback
                ax1.plot(range(len(monthly_data)), monthly_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], 
                        label='üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', marker='o', linewidth=2.5, color='#2E86AB')
                if forecast_values:
                    forecast_start = len(monthly_data)
                    ax1.plot(range(forecast_start, forecast_start + len(forecast_values)), forecast_values, 
                            label='üöÄ –ü—Ä–æ–≥–Ω–æ–∑ Random Forest', color='#E74C3C', marker='s', linestyle='--', linewidth=3)
            
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            ax1.set_xlabel('–ü–µ—Ä–∏–æ–¥', fontsize=12, fontweight='bold')
            ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤', fontsize=12, fontweight='bold')
            ax1.set_title(f'üéØ Random Forest: –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤\n'
                        f'–¢–æ—á–Ω–æ—Å—Ç—å: R¬≤ = {r2:.3f} | –û—à–∏–±–∫–∞: MAE = {mae:.1f}', 
                        fontsize=14, fontweight='bold', pad=20)
            ax1.legend(loc='upper left', frameon=True, fancybox=True, shadow=True, fontsize=11)
            ax1.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)
            ax1.set_facecolor('#FAFAFA')
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è Random Forest (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç XGBoost)
            if len(X_test) > 0 and len(y_test) > 0:
                # –í–∞—Ä–∏–∞–Ω—Ç A: –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–£–ù–ò–ö–ê–õ–¨–ù–´–ô –î–õ–Ø RF)
                residuals = y_pred - y_test
                
                # –°–æ–∑–¥–∞–µ–º subplot –≤ subplot –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                from matplotlib.gridspec import GridSpec
                gs = GridSpec(2, 2, figure=fig, left=0.1, right=0.95, top=0.45, bottom=0.05, 
                            wspace=0.3, hspace=0.4)
                
                # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π ax2 –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
                ax2.remove()
                
                # –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ 1: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
                ax2_1 = fig.add_subplot(gs[0, 0])
                n, bins, patches = ax2_1.hist(residuals, bins=15, alpha=0.7, color='skyblue', 
                                            edgecolor='black', density=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                mu, sigma = np.mean(residuals), np.std(residuals)
                x_norm = np.linspace(residuals.min(), residuals.max(), 100)
                y_norm = ((1/(sigma * np.sqrt(2 * np.pi))) * 
                        np.exp(-0.5 * ((x_norm - mu) / sigma) ** 2))
                ax2_1.plot(x_norm, y_norm, 'r-', linewidth=2, label='–ù–æ—Ä–º. —Ä–∞—Å–ø—Ä.')
                ax2_1.axvline(x=0, color='green', linestyle='--', alpha=0.8, linewidth=2)
                ax2_1.set_title('üîî –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤', fontsize=12, fontweight='bold')
                ax2_1.set_xlabel('–û—Å—Ç–∞—Ç–∫–∏')
                ax2_1.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
                ax2_1.legend()
                ax2_1.grid(True, alpha=0.3)
                
                # –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ 2: Q-Q plot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
                ax2_2 = fig.add_subplot(gs[0, 1])
                from scipy import stats
                stats.probplot(residuals, dist="norm", plot=ax2_2)
                ax2_2.set_title('üìà Q-Q –≥—Ä–∞—Ñ–∏–∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏', fontsize=12, fontweight='bold')
                ax2_2.grid(True, alpha=0.3)
                
                # –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ 3: –û—Å—Ç–∞—Ç–∫–∏ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                ax2_3 = fig.add_subplot(gs[1, 0])
                ax2_3.scatter(y_pred, residuals, alpha=0.6, color='coral', s=60, edgecolor='white')
                ax2_3.axhline(y=0, color='red', linestyle='--', alpha=0.8, linewidth=2)
                
                # –î–æ–±–∞–≤–ª—è–µ–º LOWESS —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                try:
                    from statsmodels.nonparametric.smoothers_lowess import lowess
                    smoothed = lowess(residuals, y_pred, frac=0.3)
                    ax2_3.plot(smoothed[:, 0], smoothed[:, 1], color='blue', linewidth=3, alpha=0.8)
                except:
                    # –ï—Å–ª–∏ statsmodels –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
                    z = np.polyfit(y_pred, residuals, 2)
                    p = np.poly1d(z)
                    x_smooth = np.linspace(y_pred.min(), y_pred.max(), 100)
                    ax2_3.plot(x_smooth, p(x_smooth), color='blue', linewidth=3, alpha=0.8)
                
                ax2_3.set_title('üéØ –û—Å—Ç–∞—Ç–∫–∏ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è', fontsize=12, fontweight='bold')
                ax2_3.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
                ax2_3.set_ylabel('–û—Å—Ç–∞—Ç–∫–∏')
                ax2_3.grid(True, alpha=0.3)
                
                # –ü–æ–¥–≥—Ä–∞—Ñ–∏–∫ 4: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                ax2_4 = fig.add_subplot(gs[1, 1])
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                abs_errors = np.abs(residuals)
                error_threshold_low = np.percentile(abs_errors, 33)
                error_threshold_high = np.percentile(abs_errors, 67)
                
                excellent = np.sum(abs_errors <= error_threshold_low)
                good = np.sum((abs_errors > error_threshold_low) & (abs_errors <= error_threshold_high))
                poor = np.sum(abs_errors > error_threshold_high)
                
                sizes = [excellent, good, poor]
                labels = ['–û—Ç–ª–∏—á–Ω—ã–µ\n(‚â§33%)', '–•–æ—Ä–æ—à–∏–µ\n(33-67%)', '–°–ª–∞–±—ã–µ\n(‚â•67%)']
                colors = ['#2ECC71', '#F39C12', '#E74C3C']
                explode = (0.05, 0.05, 0.1)
                
                wedges, texts, autotexts = ax2_4.pie(sizes, labels=labels, colors=colors, 
                                                    explode=explode, autopct='%1.1f%%', 
                                                    startangle=90, shadow=True)
                
                for autotext in autotexts:
                    autotext.set_color('white')
                    autotext.set_fontweight('bold')
                    autotext.set_fontsize(9)
                
                ax2_4.set_title('üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π', fontsize=12, fontweight='bold')
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
                overall_stats = f'üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–õ–ò:\n' \
                            f'R¬≤ = {r2:.3f} | MAE = {mae:.1f} | RMSE = {np.sqrt(np.mean(residuals**2)):.1f}\n' \
                            f'–°—Ä–µ–¥–Ω–µ–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {np.mean(residuals):.2f} | –ú–µ–¥–∏–∞–Ω–∞: {np.median(residuals):.2f}'
                
                fig.text(0.5, 0.02, overall_stats, ha='center', va='bottom', fontsize=11, 
                        bbox=dict(boxstyle='round,pad=0.5', facecolor='lightcyan', alpha=0.8))

            elif len(monthly_data) >= 12:
                # –í–∞—Ä–∏–∞–Ω—Ç B: –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤—å–µ–≤ Random Forest (–£–ù–ò–ö–ê–õ–¨–ù–´–ô)
                ax2.clear()
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤
                n_trees_to_show = min(10, model.n_estimators)
                individual_importances = []
                
                for i in range(n_trees_to_show):
                    tree_importance = model.estimators_[i].feature_importances_
                    individual_importances.append(tree_importance)
                
                individual_importances = np.array(individual_importances)
                feature_names = ['–ü–µ—Ä–∏–æ–¥', '–ú–µ—Å—è—Ü', '–õ–∞–≥ 1', '–õ–∞–≥ 2', '–°–∫–æ–ª—å–∑. —Å—Ä.', '–°–µ–∑–æ–Ω sin', '–°–µ–∑–æ–Ω cos']
                
                # –°–æ–∑–¥–∞–µ–º violin plot –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–±—Ä–æ—Å–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ –¥–µ—Ä–µ–≤—å—è–º
                positions = range(len(feature_names))
                violin_data = [individual_importances[:, i] for i in range(len(feature_names))]
                
                violin_parts = ax2.violinplot(violin_data, positions=positions, 
                                            showmeans=True, showmedians=True, showextrema=True)
                
                # –ö—Ä–∞—Å–∏–º violin plots –≤ —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞
                colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8']
                for pc, color in zip(violin_parts['bodies'], colors):
                    pc.set_facecolor(color)
                    pc.set_alpha(0.7)
                    pc.set_edgecolor('black')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Ç–æ—á–∫–∏
                means = [np.mean(data) for data in violin_data]
                ax2.scatter(positions, means, color='red', s=100, zorder=3, 
                        marker='D', edgecolor='white', linewidth=2, label='–°—Ä–µ–¥–Ω–µ–µ')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
                for i, (pos, mean_val) in enumerate(zip(positions, means)):
                    ax2.text(pos, mean_val + max(means)*0.02, f'{mean_val:.3f}', 
                            ha='center', va='bottom', fontweight='bold', fontsize=9)
                
                ax2.set_xticks(positions)
                ax2.set_xticklabels(feature_names, rotation=45, ha='right')
                ax2.set_ylabel('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤ –¥–µ—Ä–µ–≤—å—è—Ö', fontsize=12, fontweight='bold')
                ax2.set_title(f'üå≤ –†–∞–∑–±—Ä–æ—Å –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ {n_trees_to_show} –¥–µ—Ä–µ–≤—å—è–º RF', 
                            fontsize=14, fontweight='bold')
                ax2.grid(True, alpha=0.3, axis='y')
                ax2.legend()
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–±—Ä–æ—Å–∞
                stability_scores = [np.std(data) for data in violin_data]
                most_stable = feature_names[np.argmin(stability_scores)]
                most_variable = feature_names[np.argmax(stability_scores)]
                
                stats_text = f'–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:\n' \
                            f'–°–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π: {most_stable}\n' \
                            f'–°–∞–º—ã–π –∏–∑–º–µ–Ω—á–∏–≤—ã–π: {most_variable}\n' \
                            f'–î–µ—Ä–µ–≤—å–µ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {n_trees_to_show}'
                
                ax2.text(0.02, 0.98, stats_text, transform=ax2.transAxes, fontsize=10,
                        verticalalignment='top', horizontalalignment='left',
                        bbox=dict(boxstyle='round,pad=0.5', facecolor='lightgreen', alpha=0.8))
            else:
                # –í–∞—Ä–∏–∞–Ω—Ç C: –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–¥–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ (–£–ù–ò–ö–ê–õ–¨–ù–´–ô)
                ax2.clear()
                
                # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ –∏–∑ –ª—É—á—à–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                tree_idx = 0  # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–ª–∏ –ª—É—á—à–µ–µ –¥–µ—Ä–µ–≤–æ
                tree = model.estimators_[tree_idx]
                
                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞
                from matplotlib.patches import Rectangle, FancyBboxPatch
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ä–µ–≤–µ
                n_nodes = tree.tree_.node_count
                children_left = tree.tree_.children_left
                children_right = tree.tree_.children_right
                feature = tree.tree_.feature
                threshold = tree.tree_.threshold
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                max_depth_to_show = 3
                feature_names = ['–ü–µ—Ä–∏–æ–¥', '–ú–µ—Å—è—Ü', '–õ–∞–≥ 1', '–õ–∞–≥ 2', '–°–∫–æ–ª—å–∑. —Å—Ä.', '–°–µ–∑–æ–Ω sin', '–°–µ–∑–æ–Ω cos']
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —É–∑–ª–æ–≤
                def draw_tree_recursive(node_id, x, y, width, depth):
                    if depth > max_depth_to_show or node_id == -1:
                        return
                    
                    # –¶–≤–µ—Ç —É–∑–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã
                    colors = ['lightblue', 'lightgreen', 'lightyellow', 'lightcoral']
                    color = colors[min(depth, len(colors)-1)]
                    
                    # –†–∏—Å—É–µ–º —É–∑–µ–ª
                    if children_left[node_id] != children_right[node_id]:  # –ù–µ –ª–∏—Å—Ç–æ–≤–æ–π —É–∑–µ–ª
                        # –£—Å–ª–æ–≤–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è
                        if feature[node_id] < len(feature_names):
                            label = f'{feature_names[feature[node_id]]}\n‚â§ {threshold[node_id]:.2f}'
                        else:
                            label = f'Feature {feature[node_id]}\n‚â§ {threshold[node_id]:.2f}'
                        
                        box = FancyBboxPatch((x-width/2, y-0.05), width, 0.1, 
                                        boxstyle="round,pad=0.01", 
                                        facecolor=color, edgecolor='black', linewidth=1)
                        ax2.add_patch(box)
                        ax2.text(x, y, label, ha='center', va='center', fontsize=8, fontweight='bold')
                        
                        # –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –∫ –¥–æ—á–µ—Ä–Ω–∏–º —É–∑–ª–∞–º
                        left_x = x - width/2
                        right_x = x + width/2
                        child_y = y - 0.2
                        
                        ax2.plot([x, left_x], [y-0.05, child_y+0.05], 'k-', linewidth=1)
                        ax2.plot([x, right_x], [y-0.05, child_y+0.05], 'k-', linewidth=1)
                        
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∏—Å—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
                        draw_tree_recursive(children_left[node_id], left_x, child_y, width/2, depth+1)
                        draw_tree_recursive(children_right[node_id], right_x, child_y, width/2, depth+1)
                    else:
                        # –õ–∏—Å—Ç–æ–≤–æ–π —É–∑–µ–ª
                        box = FancyBboxPatch((x-width/4, y-0.03), width/2, 0.06, 
                                        boxstyle="round,pad=0.01", 
                                        facecolor='lightpink', edgecolor='black', linewidth=1)
                        ax2.add_patch(box)
                        ax2.text(x, y, '–õ–∏—Å—Ç', ha='center', va='center', fontsize=7)
                
                # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ —Å –∫–æ—Ä–Ω—è
                draw_tree_recursive(0, 0.5, 0.9, 0.8, 0)
                
                ax2.set_xlim(0, 1)
                ax2.set_ylim(0, 1)
                ax2.set_aspect('equal')
                ax2.axis('off')
                ax2.set_title(f'üå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞ #{tree_idx+1} (–≥–ª—É–±–∏–Ω–∞ ‚â§{max_depth_to_show})', 
                            fontsize=14, fontweight='bold', pad=20)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                feature_importance = model.feature_importances_
                importance_text = "üèÜ –û–±—â–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:\n"
                sorted_features = sorted(zip(feature_names, feature_importance), 
                                    key=lambda x: x[1], reverse=True)
                
                for i, (fname, importance) in enumerate(sorted_features[:5]):
                    importance_text += f"{i+1}. {fname}: {importance:.3f}\n"
                
                ax2.text(0.02, 0.4, importance_text, transform=ax2.transAxes, fontsize=10,
                        verticalalignment='top', horizontalalignment='left',
                        bbox=dict(boxstyle='round,pad=0.5', facecolor='lavender', alpha=0.8))
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
                model_info = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RF:\n" \
                            f"–í—Å–µ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤: {model.n_estimators}\n" \
                            f"–ú–∞–∫—Å. –≥–ª—É–±–∏–Ω–∞: {model.max_depth}\n" \
                            f"–ú–∏–Ω. –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –ª–∏—Å—Ç–µ: {model.min_samples_leaf}\n" \
                            f"–°–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {model.max_features}"
                
                ax2.text(0.98, 0.4, model_info, transform=ax2.transAxes, fontsize=10,
                        verticalalignment='top', horizontalalignment='right',
                        bbox=dict(boxstyle='round,pad=0.5', facecolor='lightcyan', alpha=0.8))
            
            # –û–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            try:
                ax2.set_facecolor('#FAFAFA')
                ax2.tick_params(axis='both', which='major', labelsize=10)
            except:
                pass  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–µ A
            
            # –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞
            plt.tight_layout(pad=3.0)
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            canvas = FigureCanvasTkAgg(fig, master=self.forecast_plot_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            feature_names = ['–ü–µ—Ä–∏–æ–¥', '–ú–µ—Å—è—Ü', '–õ–∞–≥ 1', '–õ–∞–≥ 2', '–°–∫–æ–ª—å–∑. —Å—Ä.', '–°–µ–∑–æ–Ω sin', '–°–µ–∑–æ–Ω cos']
            self.forecast_results = {
                'dates': forecast_dates,
                'values': forecast_values,
                'model': 'Random Forest',
                'mae': mae,
                'r2': r2,
                'feature_importance': dict(zip(feature_names, model.feature_importances_))
            }
            
            self.update_status(f"ML –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤ (MAE: {mae:.1f}, R¬≤: {r2:.3f})")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ ML –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import traceback
            print("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ Random Forest:")
            traceback.print_exc()

    def _plot_feature_importance_enhanced(self, ax, model):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        feature_importance = model.feature_importances_
        feature_names = ['–ü–µ—Ä–∏–æ–¥', '–ú–µ—Å—è—Ü', '–õ–∞–≥ 1', '–õ–∞–≥ 2', '–°–∫–æ–ª—å–∑. —Å—Ä.', '–°–µ–∑–æ–Ω sin', '–°–µ–∑–æ–Ω cos']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        importance_data = list(zip(feature_names, feature_importance))
        importance_data.sort(key=lambda x: x[1], reverse=True)
        sorted_names, sorted_importance = zip(*importance_data)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
        colors = plt.cm.viridis(np.linspace(0.2, 0.9, len(sorted_names)))
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        bars = ax.barh(range(len(sorted_names)), sorted_importance, 
                    color=colors, alpha=0.8, edgecolor='white', linewidth=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        for i, (bar, importance) in enumerate(zip(bars, sorted_importance)):
            percentage = importance * 100
            ax.text(bar.get_width() + max(sorted_importance)*0.01, 
                    bar.get_y() + bar.get_height()/2, 
                    f'{percentage:.1f}%', ha='left', va='center', 
                    fontsize=11, fontweight='bold', color='darkblue')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–≥
            ax.text(-max(sorted_importance)*0.02, bar.get_y() + bar.get_height()/2, 
                    f'#{i+1}', ha='right', va='center', 
                    fontsize=10, fontweight='bold', color='darkred')
        
        ax.set_yticks(range(len(sorted_names)))
        ax.set_yticklabels(sorted_names, fontsize=11)
        ax.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞', fontsize=12, fontweight='bold')
        ax.set_title('üèÜ –†–µ–π—Ç–∏–Ω–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Random Forest)', fontsize=14, fontweight='bold')
        ax.grid(True, axis='x', alpha=0.3, linestyle='--')
        ax.set_xlim(-max(sorted_importance)*0.05, max(sorted_importance) * 1.2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏
        top_3_sum = sum(sorted_importance[:3])
        stats_text = f'–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏:\n–¢–æ–ø-3 –ø—Ä–∏–∑–Ω–∞–∫–∞: {top_3_sum*100:.1f}%\n–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π: {sorted_names[0]}\n–í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(sorted_names)}'
        ax.text(0.98, 0.02, stats_text, transform=ax.transAxes, fontsize=10,
                verticalalignment='bottom', horizontalalignment='right',
                bbox=dict(boxstyle='round,pad=0.5', facecolor='lightgreen', alpha=0.8))

    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
            
        filename = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("Excel —Ñ–∞–π–ª—ã", "*.xlsx")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        if filename:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                data_to_save = self.processed_data if self.processed_data is not None else self.current_data
                
                if filename.endswith('.csv'):
                    data_to_save.to_csv(filename, index=False, encoding='utf-8')
                else:
                    data_to_save.to_excel(filename, index=False)
                    
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {os.path.basename(filename)}")
                self.update_status(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {os.path.basename(filename)}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

    def forecast_linear_regression(self):
            """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
            if not SKLEARN_AVAILABLE:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                return
                
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                data = self.current_data.copy()
                region_filter = getattr(self, 'forecast_region_var', None)
                if region_filter and region_filter != '–í—Å–µ' and '–†–µ–≥–∏–æ–Ω' in data.columns:
                    data = data[data['–†–µ–≥–∏–æ–Ω'] == region_filter]
                data['–î–∞—Ç–∞'] = pd.to_datetime(data['–î–∞—Ç–∞'])
                monthly_data = data.groupby(pd.Grouper(key='–î–∞—Ç–∞', freq='M'))['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
                monthly_data = monthly_data[monthly_data > 0]
                
                if len(monthly_data) < 6:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
                    return
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                X = np.arange(len(monthly_data)).reshape(-1, 1)
                y = monthly_data.values
                
                # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                poly_features = PolynomialFeatures(degree=2)
                X_poly = poly_features.fit_transform(X)
                
                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                model = LinearRegression()
                model.fit(X_poly, y)
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                periods = self.forecast_period.get()
                X_future = np.arange(len(monthly_data), len(monthly_data) + periods).reshape(-1, 1)
                X_future_poly = poly_features.transform(X_future)
                forecast_values = model.predict(X_future_poly)
                forecast_values = np.maximum(forecast_values, 0)
                
                # –î–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
                last_date = monthly_data.index[-1]
                forecast_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), 
                                            periods=periods, freq='M')
                
                # –ì—Ä–∞—Ñ–∏–∫
                fig, ax = plt.subplots(figsize=(12, 8))
                
                # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                ax.plot(monthly_data.index, monthly_data.values, 
                    label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', marker='o', linewidth=2, color='blue')
                
                # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                y_fitted = model.predict(X_poly)
                ax.plot(monthly_data.index, y_fitted, 
                    label='–õ–∏–Ω–µ–π–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è', color='green', linestyle=':', linewidth=2)
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                ax.plot(forecast_dates, forecast_values, 
                    label='–ü—Ä–æ–≥–Ω–æ–∑ (Polynomial Regression)', color='red', marker='s', linestyle='--', linewidth=2)
                
                ax.set_xlabel('–î–∞—Ç–∞')
                ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤')
                ax.set_title(f'–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤ (Polynomial Regression)', fontsize=14)
                ax.legend()
                ax.grid(True, alpha=0.3)
                
                plt.xticks(rotation=45)
                plt.tight_layout()
                
                # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                canvas = FigureCanvasTkAgg(fig, master=self.forecast_plot_frame)
                canvas.draw()
                canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                r2 = model.score(X_poly, y)
                self.forecast_results = {
                    'dates': forecast_dates,
                    'values': forecast_values,
                    'model': 'Linear Regression',
                    'r2': r2
                }
                
                self.update_status(f"–ü—Ä–æ–≥–Ω–æ–∑ Linear Regression –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {periods} –º–µ—Å—è—Ü–µ–≤ (R¬≤={r2:.3f})")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ Linear Regression: {str(e)}")
                                        
    def create_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        if self.current_data is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞!")
            return
            
        report_type = self.report_type.get()
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.report_text.config(state=tk.NORMAL)
        self.report_text.delete(1.0, tk.END)
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if report_type == "summary":
                self.generate_summary_report()
            elif report_type == "detailed":
                self.generate_detailed_report()
            elif report_type == "forecast":
                self.generate_forecast_report()
            elif report_type == "comparative":
                self.generate_comparative_report()
                
        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            self.report_text.insert(1.0, error_text)
        
        finally:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            self.report_text.config(state=tk.DISABLED)

    def generate_summary_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢                                  ‚ïë
‚ïë                       –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–¨ –ù–ê–°–ï–õ–ï–ù–ò–Ø –†–ö                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

1. –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –†–ï–ì–ò–û–ù–ê–ú - –¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏
"""
            
            # –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤
            regional_totals = self.current_data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False)
            
            for i, (region, total) in enumerate(regional_totals.head(10).items(), 1):
                percentage = (total / self.current_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()) * 100
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìä"
                report += f"\n{medal} {i:2d}. {region:<20} {total:>8,.0f} ({percentage:5.1f}%)"

            self.report_text.insert(1.0, report)
            self.update_status("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
                    error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
                    self.report_text.insert(1.0, error_text)

    def generate_summary_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                  –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–ò –ù–ê–°–ï–õ–ï–ù–ò–Ø                   ‚ïë
‚ïë                              –†–ï–°–ü–£–ë–õ–ò–ö–ê –ö–ê–ó–ê–•–°–¢–ê–ù                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üìä –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: 1.2

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                              1. –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üóìÔ∏è  –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {self.current_data['–î–∞—Ç–∞'].min()} ‚Äî {self.current_data['–î–∞—Ç–∞'].max()}
üìà  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤: {self.current_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum():,}
üè•  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(self.current_data):,}
üåç  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {self.current_data['–†–µ–≥–∏–æ–Ω'].nunique()}
üíä  –¢–∏–ø–æ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {self.current_data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].nunique()}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                         2. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–ë–û–õ–ï–í–ê–ù–ò–Ø–ú
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º
            disease_stats = self.current_data.groupby('–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].agg(['sum', 'mean', 'std']).round(1)
            
            for disease, stats in disease_stats.iterrows():
                report += f"""
üìç {disease}:
   ‚Ä¢ –í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤: {stats['sum']:,.0f}
   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –º–µ—Å—è—Ü: {stats['mean']:,.1f}
   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats['std']:,.1f}"""
            
            report += f"""

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                         3. –¢–û–ü-5 –†–ï–ì–ò–û–ù–û–í –ü–û –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
            top_regions = self.current_data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False).head(5)
            for i, (region, count) in enumerate(top_regions.items(), 1):
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
                percentage = (count / self.current_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()) * 100
                report += f"\n{medal} {i}. {region}: {count:,} —Å–ª—É—á–∞–µ–≤ ({percentage:.1f}%)"
            
            # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if '–í–æ–∑—Ä–∞—Å—Ç' in self.current_data.columns:
                report += f"""

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                            4. –í–û–ó–†–ê–°–¢–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
                age_bins = pd.cut(self.current_data['–í–æ–∑—Ä–∞—Å—Ç'], bins=[0, 14, 30, 45, 60, 100], 
                                 labels=['0-14 –ª–µ—Ç', '15-30 –ª–µ—Ç', '31-45 –ª–µ—Ç', '46-60 –ª–µ—Ç', '60+ –ª–µ—Ç'])
                age_dist = self.current_data.groupby(age_bins)['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
                
                for age_group, count in age_dist.items():
                    percentage = (count / self.current_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()) * 100
                    report += f"\nüë• {age_group}: {count:,} —Å–ª—É—á–∞–µ–≤ ({percentage:.1f}%)"
            
            # –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            report += f"""

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                               5. –°–ï–ó–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
            self.current_data['–î–∞—Ç–∞_dt'] = pd.to_datetime(self.current_data['–î–∞—Ç–∞'])
            seasonal_data = self.current_data.groupby(self.current_data['–î–∞—Ç–∞_dt'].dt.quarter)['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
            seasons = {1: 'I –∫–≤–∞—Ä—Ç–∞–ª (–∑–∏–º–∞-–≤–µ—Å–Ω–∞)', 2: 'II –∫–≤–∞—Ä—Ç–∞–ª (–≤–µ—Å–Ω–∞-–ª–µ—Ç–æ)', 
                      3: 'III –∫–≤–∞—Ä—Ç–∞–ª (–ª–µ—Ç–æ-–æ—Å–µ–Ω—å)', 4: 'IV –∫–≤–∞—Ä—Ç–∞–ª (–æ—Å–µ–Ω—å-–∑–∏–º–∞)'}
            
            for quarter, count in seasonal_data.items():
                percentage = (count / self.current_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()) * 100
                report += f"\nüóìÔ∏è  {seasons[quarter]}: {count:,} —Å–ª—É—á–∞–µ–≤ ({percentage:.1f}%)"
            
            report += f"""

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                                6. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîç –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã:
‚Ä¢ –ù–∞–∏–±–æ–ª—å—à–∞—è –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ: {top_regions.index[0]}
‚Ä¢ –î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ: {disease_stats.sort_values('sum', ascending=False).index[0]}
‚Ä¢ –ü–∏–∫–æ–≤—ã–π —Å–µ–∑–æ–Ω: {seasons[seasonal_data.idxmax()]}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –£—Å–∏–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö —Å –≤—ã—Å–æ–∫–æ–π –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç—å—é
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ–∑–æ–Ω–Ω–æ–º—É —Ä–æ—Å—Ç—É –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è –†–ö v1.2
¬© 2025 –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            """
            
            self.report_text.insert(1.0, report)
            self.update_status("–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            self.report_text.insert(1.0, error_text)

    def generate_detailed_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                  –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–ò –ù–ê–°–ï–õ–ï–ù–ò–Ø                 ‚ïë
‚ïë                              –†–ï–°–ü–£–ë–õ–ò–ö–ê –ö–ê–ó–ê–•–°–¢–ê–ù                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                               1. –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
            # –ü–æ–º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.current_data['–î–∞—Ç–∞_dt'] = pd.to_datetime(self.current_data['–î–∞—Ç–∞'])
            monthly_stats = self.current_data.groupby(self.current_data['–î–∞—Ç–∞_dt'].dt.to_period('M'))['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
            
            for period, count in monthly_stats.items():
                report += f"\nüìä {period}: {count:,} —Å–ª—É—á–∞–µ–≤"
                
            report += f"""

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                              2. –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            for region in sorted(self.current_data['–†–µ–≥–∏–æ–Ω'].unique()):
                region_data = self.current_data[self.current_data['–†–µ–≥–∏–æ–Ω'] == region]
                total_cases = region_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
                
                report += f"""

üè• {region}:
   üìà –í—Å–µ–≥–æ —Å–ª—É—á–∞–µ–≤: {total_cases:,}
   üìä –ó–∞–ø–∏—Å–µ–π: {len(region_data):,}
   üóìÔ∏è  –ü–µ—Ä–∏–æ–¥: {region_data['–î–∞—Ç–∞'].min()} ‚Äî {region_data['–î–∞—Ç–∞'].max()}"""
                
                # –¢–æ–ø –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ
                top_diseases = region_data.groupby('–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False).head(3)
                report += "\n   üíä –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:"
                for j, (disease, count) in enumerate(top_diseases.items(), 1):
                    percentage = (count / total_cases) * 100
                    report += f"\n      {j}. {disease}: {count:,} ({percentage:.1f}%)"
            
            self.report_text.insert(1.0, report)
            self.update_status("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            self.report_text.insert(1.0, error_text)

    def generate_forecast_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            if self.forecast_results is None:
                report = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          –ü–†–û–ì–ù–û–ó–ù–´–ô –û–¢–ß–ï–¢                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≥–Ω–æ–∑ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω!

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–≥–Ω–æ–∑—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
4. –ù–∞–∂–º–∏—Ç–µ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"
5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ—Ç—á–µ—Ç–∞
                """
            else:
                model_name = self.forecast_results.get('model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
                dates = self.forecast_results['dates']
                values = self.forecast_results['values']
                
                report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          –ü–†–û–ì–ù–û–ó–ù–´–ô –û–¢–ß–ï–¢                                    ‚ïë
‚ïë                       –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–¨ –ù–ê–°–ï–õ–ï–ù–ò–Ø –†–ö                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üîÆ –ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {model_name}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                              1. –ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–û–ì–ù–û–ó–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ –ú–æ–¥–µ–ª—å: {model_name}
üìä –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: {len(values)} –º–µ—Å—è—Ü–µ–≤
üóìÔ∏è  –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {dates[0].strftime('%Y-%m')} ‚Äî {dates[-1].strftime('%Y-%m')}"""

                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'r2' in self.forecast_results:
                    r2 = self.forecast_results['r2']
                    report += f"\nüìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (R¬≤): {r2:.3f}"
                    
                if 'mae' in self.forecast_results:
                    mae = self.forecast_results['mae']
                    report += f"\nüìâ –°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {mae:.0f}"

                report += f"""

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                              2. –ü–†–û–ì–ù–û–ó–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
                
                # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
                for date, value in zip(dates, values):
                    report += f"\nüìÖ {date.strftime('%Y-%m')}: {value:,.0f} —Å–ª—É—á–∞–µ–≤"
            
            self.report_text.insert(1.0, report)
            self.update_status("–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            self.report_text.insert(1.0, error_text)

    def generate_comparative_report(self):
            """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
            try:
                report = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢                                  ‚ïë
‚ïë                       –ó–ê–ë–û–õ–ï–í–ê–ï–ú–û–°–¢–¨ –ù–ê–°–ï–õ–ï–ù–ò–Ø –†–ö                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

                1. –°–†–ê–í–ù–ï–ù–ò–ï –ü–û –†–ï–ì–ò–û–ù–ê–ú - –¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–µ–º–æ—Å—Ç–∏
                """
                
                # –†–µ–π—Ç–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤
                regional_totals = self.current_data.groupby('–†–µ–≥–∏–æ–Ω')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().sort_values(ascending=False)
                
                for i, (region, total) in enumerate(regional_totals.head(10).items(), 1):
                    percentage = (total / self.current_data['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()) * 100
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìä"
                    report += f"\n{medal} {i:2d}. {region:<20} {total:>8,.0f} ({percentage:5.1f}%)"

                self.report_text.insert(1.0, report)
                self.update_status("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}"
                self.report_text.insert(1.0, error_text)

    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
        content = self.report_text.get(1.0, tk.END).strip()
        if not content:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
            
        format_type = self.export_format.get()
        
        try:
            if format_type == "PDF":
                self.export_to_pdf(content)
            elif format_type == "Excel":
                self.export_to_excel(content)
            elif format_type == "Word":
                self.export_to_word(content)
            elif format_type == "HTML":
                self.export_to_html(content)
            elif format_type == "TXT":
                self.export_to_txt(content)
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

    def export_to_html(self, content):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ HTML"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".html",
            filetypes=[("HTML —Ñ–∞–π–ª—ã", "*.html")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫ HTML"
        )
        
        if not filename:
            return
            
        try:
            html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –†–ö</title>
    <style>
        body {{
            font-family: 'Courier New', monospace;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            border-bottom: 3px solid #3498db;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }}
        .header h1 {{
            color: #2c3e50;
            margin: 0;
            font-size: 24px;
        }}
        .header .subtitle {{
            color: #7f8c8d;
            margin-top: 10px;
        }}
        pre {{
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
            white-space: pre-wrap;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
            font-size: 12px;
            line-height: 1.4;
        }}
        .footer {{
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #ecf0f1;
            font-size: 12px;
            color: #7f8c8d;
        }}
        @media print {{
            body {{ background: white; }}
            .container {{ box-shadow: none; }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –û—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π</h1>
            <div class="subtitle">–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Ä¢ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</div>
            <div class="subtitle">–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}</div>
        </div>
        
        <pre>{content}</pre>
        
        <div class="footer">
            <p><strong>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è –†–ö v1.2</strong></p>
            <p>¬© 2025 –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</p>
            <p><em>–î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏</em></p>
        </div>
    </div>
</body>
</html>
            """
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(filename)}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
            response = messagebox.askyesno("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", "–û—Ç–∫—Ä—ã—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π HTML —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ?")
            if response:
                webbrowser.open('file://' + os.path.abspath(filename))
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML —Ñ–∞–π–ª–∞: {str(e)}")

    def export_to_pdf(self, content):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ PDF"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF —Ñ–∞–π–ª—ã", "*.pdf")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫ PDF"
        )
        
        if not filename:
            return
            
        try:
            pdf = FPDF()
            pdf.add_page()
            pdf.add_font('Arial', '', 'C:\\Windows\\Fonts\\arial.ttf', uni=True)
            pdf.set_font('Arial', size=12)
            for line in content.splitlines():
                pdf.multi_cell(0, 10, txt=line)
            pdf.output(filename)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"PDF –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(filename)}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")

    def export_to_excel(self, content):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel —Ñ–∞–π–ª—ã", "*.xlsx")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫ Excel"
        )
        
        if not filename:
            return
            
        try:
            if OPENPYXL_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º openpyxl –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                workbook = openpyxl.Workbook()
                worksheet = workbook.active
                worksheet.title = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç"
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                worksheet['A1'] = "–û—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏—è –†–ö"
                worksheet['A1'].font = Font(bold=True, size=16)
                worksheet['A1'].alignment = Alignment(horizontal='center')
                
                # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                worksheet['A2'] = f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                worksheet['A2'].font = Font(size=12)
                
                # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                lines = content.split('\n')
                row = 4
                
                for line in lines:
                    if line.strip():
                        worksheet[f'A{row}'] = line.replace('‚ïê', '=').replace('‚ïë', '|')  # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                        # –í—ã–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if any(marker in line for marker in ['–û–¢–ß–ï–¢', '–ê–ù–ê–õ–ò–ó', '–°–¢–ê–¢–ò–°–¢–ò–ö–ê', '‚ïê‚ïê‚ïê']):
                            worksheet[f'A{row}'].font = Font(bold=True)
                    row += 1
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                worksheet.column_dimensions['A'].width = 120
                
                workbook.save(filename)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Excel: {os.path.basename(filename)}")
                
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas
                lines = content.split('\n')
                df = pd.DataFrame({'–û—Ç—á–µ—Ç': lines})
                df.to_excel(filename, index=False)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Excel: {os.path.basename(filename)}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")

    def export_to_word(self, content):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Word (RTF —Ñ–æ—Ä–º–∞—Ç)"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".rtf",
            filetypes=[("RTF —Ñ–∞–π–ª—ã", "*.rtf"), ("Word —Ñ–∞–π–ª—ã", "*.docx")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫ Word"
        )
        
        if not filename:
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º RTF —Ñ–∞–π–ª (—á–∏—Ç–∞–µ—Ç—Å—è Word'–æ–º)
            rtf_header = r"""{\rtf1\ansi\deff0 {\fonttbl {\f0 Courier New;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;}
\f0\fs20 """
            
            # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ RTF
            clean_content = content.replace('\\', '\\\\').replace('{', '\\{').replace('}', '\\}')
            clean_content = clean_content.replace('‚ïê', '=').replace('‚ïë', '|')
            
            rtf_content = rtf_header + clean_content.replace('\n', r'\par ') + r'}'
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(rtf_content)
                
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ RTF: {os.path.basename(filename)}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ RTF —Ñ–∞–π–ª–∞: {str(e)}")

    def export_to_txt(self, content):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç"
        )
        
        if not filename:
            return
            
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç: {os.path.basename(filename)}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")


def generate_test_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        np.random.seed(42)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        start_date = pd.date_range(start='2020-01-01', end='2024-12-31', freq='D')
        regions = ['–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', '–®—ã–º–∫–µ–Ω—Ç', '–ê–∫—Ç–æ–±–µ', 
                '–ü–∞–≤–ª–æ–¥–∞—Ä', '–¢–∞—Ä–∞–∑', '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫', '–ö–æ—Å—Ç–∞–Ω–∞–π', '–ê—Ç—ã—Ä–∞—É',
                '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫', '–ê–∫—Ç–∞—É', '–ö–æ–∫—à–µ—Ç–∞—É', '–°–µ–º–µ–π', '–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω']
        diseases = ['–û–†–í–ò', '–ì—Ä–∏–ø–ø', '–ü–Ω–µ–≤–º–æ–Ω–∏—è', '–î–∏–∞–±–µ—Ç', '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', 
                '–ë—Ä–æ–Ω—Ö–∏—Ç', '–ê—Å—Ç–º–∞', '–ì–∞—Å—Ç—Ä–∏—Ç', '–ê—Ä—Ç—Ä–∏—Ç', '–ú–∏–≥—Ä–µ–Ω—å']
        
        data = []
        record_id = 1
        
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        for i, date in enumerate(start_date):
            if i % 365 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–π –≥–æ–¥
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {date.year} –≥–æ–¥–∞...")
                
            # –°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
            month = date.month
            seasonal_factor = 1.8 if month in [11, 12, 1, 2, 3] else 0.6  # –ó–∏–º–∞ vs –ª–µ—Ç–æ
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            num_records = np.random.poisson(30)  # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å
            
            for _ in range(num_records):
                region = np.random.choice(regions, p=np.random.dirichlet(np.ones(len(regions))))
                disease = np.random.choice(diseases)
                
                # –í–æ–∑—Ä–∞—Å—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
                if disease in ['–û–†–í–ò', '–ì—Ä–∏–ø–ø']:
                    age = np.random.normal(25, 15)
                    base_count = seasonal_factor * np.random.gamma(2, 3)
                elif disease == '–ü–Ω–µ–≤–º–æ–Ω–∏—è':
                    age = np.random.normal(45, 20)
                    base_count = seasonal_factor * 0.7 * np.random.gamma(2, 2)
                elif disease == '–î–∏–∞–±–µ—Ç':
                    age = np.random.normal(55, 12)
                    base_count = np.random.gamma(1.5, 2)
                elif disease == '–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è':
                    age = np.random.normal(60, 10)
                    base_count = np.random.gamma(1.8, 2)
                elif disease in ['–ë—Ä–æ–Ω—Ö–∏—Ç', '–ê—Å—Ç–º–∞']:
                    age = np.random.normal(35, 18)
                    base_count = seasonal_factor * 0.8 * np.random.gamma(1.5, 2)
                else:
                    age = np.random.normal(40, 20)
                    base_count = np.random.gamma(1.2, 2)
                
                age = max(1, min(95, int(age)))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
                count = max(1, int(base_count))
                
                # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
                if region in ['–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞']:
                    count = int(count * 1.3)  # –ë–æ–ª—å—à–µ —Å–ª—É—á–∞–µ–≤ –≤ –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
                elif region in ['–ê—Ç—ã—Ä–∞—É', '–ê–∫—Ç–∞—É']:
                    count = int(count * 0.8)  # –ú–µ–Ω—å—à–µ –≤ –æ—Ç–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
                
                data.append({
                    'ID': record_id,
                    '–î–∞—Ç–∞': date,
                    '–†–µ–≥–∏–æ–Ω': region,
                    '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ': disease,
                    '–í–æ–∑—Ä–∞—Å—Ç': age,
                    '–ü–æ–ª': np.random.choice(['–ú', '–ñ'], p=[0.48, 0.52]),  # –°–ª–µ–≥–∫–∞ –±–æ–ª—å—à–µ –∂–µ–Ω—â–∏–Ω
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count
                })
                
                record_id += 1
        
        df = pd.DataFrame(data)
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        return df
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        simple_data = {
            'ID': range(1, 101),
            '–î–∞—Ç–∞': pd.date_range('2024-01-01', periods=100, freq='D'),
            '–†–µ–≥–∏–æ–Ω': np.random.choice(['–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞'], 100),
            '–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ': np.random.choice(['–û–†–í–ò', '–ì—Ä–∏–ø–ø', '–ü–Ω–µ–≤–º–æ–Ω–∏—è'], 100),
            '–í–æ–∑—Ä–∞—Å—Ç': np.random.randint(1, 80, 100),
            '–ü–æ–ª': np.random.choice(['–ú', '–ñ'], 100),
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': np.random.randint(1, 20, 100)
        }
        return pd.DataFrame(simple_data)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        root = tk.Tk()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            root.iconbitmap('medical_icon.ico')
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∫–æ–Ω–∫–∏
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = MedicalAnalysisSystem(root)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        response = messagebox.askyesno("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –†–ö v1.2", 
                                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π!\n\n"
                                    "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π?")
        if response:
            try:
                app.update_status("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                app.root.update()
                
                app.current_data = generate_test_data()
                app.update_data_display()
                app.update_map_filters()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                app.update_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(app.current_data)} –∑–∞–ø–∏—Å–µ–π")
                
                messagebox.showinfo("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", 
                                f"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\n"
                                f"üìä –ó–∞–ø–∏—Å–µ–π: {len(app.current_data):,}\n"
                                f"üè• –†–µ–≥–∏–æ–Ω–æ–≤: {app.current_data['–†–µ–≥–∏–æ–Ω'].nunique()}\n"
                                f"üíä –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {app.current_data['–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ'].nunique()}\n"
                                f"üìÖ –ü–µ—Ä–∏–æ–¥: {app.current_data['–î–∞—Ç–∞'].min()} - {app.current_data['–î–∞—Ç–∞'].max()}\n\n"
                                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã!")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                app.update_status("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        root.mainloop()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n{str(e)}\n\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:\n"
                        f"pip install pandas numpy matplotlib seaborn tkinter")

if __name__ == "__main__":
    main()